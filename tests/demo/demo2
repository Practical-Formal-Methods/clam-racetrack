; RUN: %clam -O0 --crab-do-not-print-invariants --crab-add-invariants=all --crab-track=arr "%s".c -o %s.bc
; RUN: %llvm_dis < %s.bc | OutputCheck %s --comment=";"

; ModuleID = '../tests/demo/demo2.bc'
source_filename = "/Users/E30338/Repos/crab-llvm-5.0/tests/demo/demo2.c"
target datalayout = "e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128"
target triple = "i386-apple-macosx10.14.0"

@a = internal unnamed_addr global [10 x i32] zeroinitializer, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ([10 x i32]*)* @verifier.zero_initializer.1 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
_call:
  call void @verifier.zero_initializer.1([10 x i32]* nonnull @a) #2
  br label %_.0

_.0:                                              ; preds = %_4, %_call
  %.0 = phi i32 [ 0, %_call ], [ %_br1, %_4 ]
  %crab_ = sub i32 0, %.0
  %crab_2 = icmp slt i32 %crab_, 1
  call void @verifier.assume(i1 %crab_2) #2
  %crab_4 = icmp slt i32 %.0, 11
  call void @verifier.assume(i1 %crab_4) #2
  %_br = icmp slt i32 %.0, 10
  br i1 %_br, label %_4, label %_9

_4:                                               ; preds = %_.0
  %crab_5 = sub i32 0, %.0
  %crab_6 = icmp slt i32 %crab_5, 1
  call void @verifier.assume(i1 %crab_6) #2
  %_5 = call i32 @__CRAB_nd() #2
  %_6 = icmp eq i32 %_5, 0
  %_. = getelementptr inbounds [10 x i32], [10 x i32]* @a, i32 0, i32 %.0
  %. = select i1 %_6, i32 5, i32 0
  store i32 %., i32* %_., align 4
  %_br1 = add nsw i32 %.0, 1
  br label %_.0

_9:                                               ; preds = %_.0
  %_10 = add nsw i32 %.0, -1
  %_11 = getelementptr inbounds [10 x i32], [10 x i32]* @a, i32 0, i32 %_10
  %_ret = load i32, i32* %_11, align 4
  %crab_9 = sub i32 0, %_ret
  %crab_10 = icmp slt i32 %crab_9, 1
  call void @verifier.assume(i1 %crab_10) #2
  ; CHECK: icmp slt i32 %_ret, 6
  %crab_12 = icmp slt i32 %_ret, 6
  ; CHECK: assume
  call void @verifier.assume(i1 %crab_12) #2
  %crab_14 = sub i32 %_ret, %.0
  %crab_15 = icmp slt i32 %crab_14, 5
  call void @verifier.assume(i1 %crab_15) #2
  ret i32 %_ret
}

declare i32 @__CRAB_nd() local_unnamed_addr #1

declare void @verifier.zero_initializer.1([10 x i32]*)

declare void @verifier.assume(i1)

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"NumRegisterParameters", i32 0}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
