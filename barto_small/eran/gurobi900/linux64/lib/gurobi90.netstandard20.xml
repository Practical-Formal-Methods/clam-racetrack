<?xml version="1.0"?>
<doc>
    <assembly>
        <name>gurobi90.netstandard20</name>
    </assembly>
    <members>
        <member name="T:Gurobi.GRB">
            <summary>
            Class for various Gurobi constants.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.DoubleParam">
            <summary>
            List of double-valued parameters.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.FeasRelaxBigM">
            <summary>
            FeasRelax BigM for the cardinality type.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.ObjScale">
            <summary>
            Simplex objective scaling. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.IterationLimit">
            <summary>
            Limit on the number of simplex iterations that will be performed. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.BarConvTol">
            <summary>
            Convergence tolerance for barrier solver. Optimization terminates when the relative difference between the primal and dual objective is less than this tolerance.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.MIPGapAbs">
            <summary>
            MIP optimality tolerance. Solution is declared optimal when the absolute different between the lower and upper bound is below the specified value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.FuncMaxVal">
            <summary>
            Maximal value for |lb| and |ub| of x and y variables of general function constraints.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.CSQueueTimeout">
            <summary>
            Queue timeout for new jobs.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.FuncPieceLength">
            <summary>
            Piece length for PWL translation of general function constraints without own options specified.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.Heuristics">
            <summary>
            Fraction of runtime spent in MIP heuristics. Larger values produce more and better feasible solutions, at a cost of slower progress in the best bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.PoolGap">
            <summary>
            Maximum optimality gap for stored solutions.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.NodefileStart">
            <summary>
            Amount of storage the MIP nodes can consume (in GB) before nodes are written to disk.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.PreSOS2BigM">
            <summary>
            Largest big-M value presolve is allowed to use when converting an SOS-2 constraint into binary form.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.BestBdStop">
            <summary>
            Best bound objective threshold.  Optimization stops when the best bound is at least as good as the specified value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.FuncPieceError">
            <summary>
            Error allowed for PWL translation of general function constraints without own options specified.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.FuncPieceRatio">
            <summary>
            Control whether to link function values or to have pieces below or above the function.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.ImproveStartGap">
            <summary>
            The optimality gap at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.OptimalityTol">
            <summary>
            Dual feasibility tolerance. All dual constraints must be satisfied to this tolerance.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.MIPGap">
            <summary>
            MIP optimality tolerance. Solution is declared optimal when the relative difference between the lower and upper bound is below the specified value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.BarQCPConvTol">
            <summary>
            Convergence tolerance for barrier solver when solving a QCP model. Optimization terminates when the relative difference between the primal and dual objective is less than this tolerance.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.BestObjStop">
            <summary>
            Feasible solution objective threshold.  Optimization stops when the best feasible solution objective is at least as good as the specified value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.NodeLimit">
            <summary>
            Limit on the number of branch-and-bound nodes that will be explored. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.Cutoff">
            <summary>
            Target solution objective value. The Gurobi solver will only attempt to find solutions whose objective values are better than the specified target.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.FeasibilityTol">
            <summary>
            Primal feasibility tolerance. All constraints must be satisfied to this tolerance.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.PerturbValue">
            <summary>
            Magnitude of the simplex perturbation (when perturbation is required).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.PSDTol">
            <summary>
            QP positive semi-definite tolerance. Sets a limit on the amount of diagonal perturbation that the optimizer is allowed to perform on the Q matrix in order to correct minor PSD violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.MarkowitzTol">
            <summary>
            Threshold pivoting tolerance. Used to limit numerical error in the simplex algorithm. A larger value may avoid numerical problems in rare situations, but it will harm performance for most models.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.PreSOS1BigM">
            <summary>
            Largest big-M value presolve is allowed to use when converting an SOS-1 constraint into binary form.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.TimeLimit">
            <summary>
            Limit on the amount of time that will be used for an optimization. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.ImproveStartNodes">
            <summary>
            The explored node count at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.ImproveStartTime">
            <summary>
            The elapsed solver runtime at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.TuneTimeLimit">
            <summary>
            Limit on the amount of time that will be used for the tuning tool (in seconds).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleParam.IntFeasTol">
            <summary>
            Integer feasibility tolerance. Integer variables must take values that are no more than the specified tolerance away from the nearest integer.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.IntParam">
            <summary>
            List of integer-valued parameters.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CSIdleTimeout">
            <summary>
            How much idle time before server hangs up.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.FlowCoverCuts">
            <summary>
            Flow cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.BQPCuts">
            <summary>
            BQP cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.SolutionLimit">
            <summary>
            Limit on the number of feasible solutions found by the Gurobi MIP solver. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CSClientLog">
            <summary>
            Turns logging on or off for Compute Server. Options are off (0), only error messages (1), information and error messages (2), or (3) verbose, information, and error messages.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ObjNumber">
            <summary>
            selects the objective index of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MIRCuts">
            <summary>
            Mixed Integer Rounding (MIR) cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ZeroObjNodes">
            <summary>
            Number of nodes to explore in the Zero Objective heuristic. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ImpliedCuts">
            <summary>
            Implied bound cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.SubMIPCuts">
            <summary>
            Sub-MIP cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.StrongCGCuts">
            <summary>
            Strong Chvatal Gomory (Strong-CG) cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.NodeMethod">
            <summary>
            Algorithm used to solve the MIP node relaxations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PreDual">
            <summary>
            Presolve dualization strategy for continuous models. Forming the dual of the input model can sometimes significantly reduce solution times. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.SiftMethod">
            <summary>
            The method to solve sifting subproblem. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.DegenMoves">
            <summary>
            Limit on degenerate simplex moves. These moves are performed to improve the integrality of the current relaxation solution. By default, the algorithm chooses the number of moves to perform automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ZeroHalfCuts">
            <summary>
            Zero-half cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MinRelNodes">
            <summary>
            Number of nodes to explore in the Minimum Relaxation heuristic. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MIQCPMethod">
            <summary>
            Indicator to solve QCP node relaxation or to use outer approximation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.NumericFocus">
            <summary>
            Numerical focus. This parameter controls the degree to which the code attempts to detect and manage numerical issues. The default setting (0) makes an automatic choice, with a slight preference for speed.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.SolutionNumber">
            <summary>
            The current solution number. When querying an alternate MIP solution through the Xn, ObjNVal or PoolObjVal attribute, determines which solution is retrieved.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Symmetry">
            <summary>
            Symmetry detection level. By default, the algorithm choose automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.TSPort">
            <summary>
            Token server port.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ConcurrentMIP">
            <summary>
            The number of concurrent MIP jobs. A value of 'n' causes the MIP solver to solve 'n' independent MIP models, using different parameter settings for each. The optimization terminates when the the first model solves.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.OutputFlag">
            <summary>
            Indicates whether Gurobi output should be enabled/disabled.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ModKCuts">
            <summary>
            Mod-K cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.DualReductions">
            <summary>
            Determines whether dual reductions in MIP are used. Disable dual reductions if you plan to add lazy constraints. Otherwise, incorrect solutions may result.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PumpPasses">
            <summary>
            Number of passes of the MIP feasibility pump heuristic performed. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ServerTimeout">
            <summary>
            Network timeout.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MultiObjPre">
            <summary>
            Initial presolve on multi-objective models.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PreMIQCPForm">
            <summary>
            Format of the presolved MIQCP model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PreSparsify">
            <summary>
            Presolve matrix sparsification.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.InfUnbdInfo">
            <summary>
            Indicates whether additional information should be made available for infeasible or unbounded LP models.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.RelaxLiftCuts">
            <summary>
            Relax-and-lift cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Threads">
            <summary>
            Parallel Gurobi MIP thread count. The default value of 0 uses all of the processors in the machine.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Aggregate">
            <summary>
            Indicates whether aggregation is enabled or disabled in presolve. In rare instances, aggregation can lead to an accumulation of numerical errors. Turning it off can sometimes improve solution accuracy.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Quad">
            <summary>
            Quad precision computation in simplex. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PoolSolutions">
            <summary>
            Number of solutions to store for a MIP model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Presolve">
            <summary>
            Presolve level. More aggressive presolve reductions can produce a model that is easier to solve, but such reductions can be expensive.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.NoRelHeuristic">
            <summary>
            Determines whether the NoRel heuristic, which searches for feasible solutions to a MIP model before solving the root relaxation, should be used.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PartitionPlace">
            <summary>
            Controls when the partition heuristic runs.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.JSONSolDetail">
            <summary>
            Controls amount of information in a JSON solution string.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Record">
            <summary>
            Replay mode, which writes one or more files that capture the sequence of Gurobi commands that your program issues. These files can be replayed later using the Gurobi command-line tool.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CSPriority">
            <summary>
            Job priority for Compute Server job.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.GomoryPasses">
            <summary>
            Maximum number of Gomory cut passes performed. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.UpdateMode">
            <summary>
            The way how to update a model. Value 1 is default and allows adding both new variables and new constraints before calling update, while value 0 doesn't allow. In most cases, value 0 and value 1 will have the same behavior for updating a model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.DisplayInterval">
            <summary>
            Frequency at which log lines are printed (in seconds).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.BarIterLimit">
            <summary>
            Limit on the number of barrier iterations that will be performed. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.SimplexPricing">
            <summary>
            Simplex variable pricing strategy.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.TuneCriterion">
            <summary>
            The tuning criterion. A MIP model can often be too hard to solve. Different users may have different criteria, some want smaller MIPGap, while others want better incumbent solutions. This parameter allows you to specify different tuning citerions, 0 for runtime, 1 for MIPGap, 2 for objective value. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Seed">
            <summary>
            Random number seed.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.TuneJobs">
            <summary>
            The number of jobs for distributed parallel tuning. A value of 'n' causes the tuning tool to distribute tuning work among 'n' parallel jobs. Jobs are distributed among a set of distributed worker machines. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MultiObjMethod">
            <summary>
            Warm-start method to solve for subsequent objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PoolSearchMode">
            <summary>
            Approach used to find solutions in the MIP search.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.GUBCoverCuts">
            <summary>
            GUB cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.RINS">
            <summary>
            Frequency at which to apply the RINS heuristic. The default value of -1 is an automatic setting. A value of 0 shuts off the RINS heuristic. Setting the parameter to a positive value 'n' applies the RINS at every n-th node in the MIP search tree.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Method">
            <summary>
            Algorithm used to solve continuous linear models.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CrossoverBasis">
            <summary>
            Type of initial crossover basis construction. The default value of 0 builds a basis quickly. Choose value 1 for a more expensive basis that is often more numerically stable.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.StartNodeLimit">
            <summary>
            Limit on the number of branch-and-bound nodes explored when completing a partial MIP start.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.NetworkCuts">
            <summary>
            Network cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.TuneOutput">
            <summary>
            The amount of output produced by the tuning tool. Level 0 produces no output; level 1 produces tuning summary output only when a new best parameter set is found; level 2 produces tuning summary output for each parameter set that is tried; level 3 produces tuning summary output, plus detailed solver output, for each parameter set tried.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.SubMIPNodes">
            <summary>
            Limit on the number of nodes explored in local search heuristics.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.FlowPathCuts">
            <summary>
            Flow path cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.AggFill">
            <summary>
            Presolve aggregation fill level. This is the amount of constraint matrix fill to allow in a single aggregation step.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.BarOrder">
            <summary>
            Barrier ordering strategy. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Sifting">
            <summary>
            Dual simplex sifting strategy for LP, MIP root and MIP nodes. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.InfProofCuts">
            <summary>
            Infeasibility proof cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ConcurrentJobs">
            <summary>
            The number of concurrent jobs for the distributed concurrent optimizer. A value of 'n' causes the concurrent optimizer to create 'n' independent models, using different parameter settings for each. Each of these models is sent to a distributed worker machine for processing. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers. The optimization terminates when the first model solves.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.LazyConstraints">
            <summary>
            Indicates whether lazy constraints are enabled. Programs that add lazy constraints must set this parameter to 1.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Crossover">
            <summary>
            Type of crossover performed after barrier. By default, the algorithm choose automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.StartNumber">
            <summary>
            Selects the MIP start index.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.QCPDual">
            <summary>
            Indicator to compute QCP duals.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Cuts">
            <summary>
            Global cut generation control.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.IISMethod">
            <summary>
            The method used to compute an Irreducible Infeasible Subsystem. Method 0 is typically much faster, but method 1 can product a much smaller IIS. Method 2 ignores the bound constraints.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.TuneResults">
            <summary>
            The number of tuning results. The tuning tool often finds multiple parameter sets that produce better results than the baseline settings. This parameter controls how many of these sets should be retained when tuning is complete.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ScenarioNumber">
            <summary>
            selects the scenario index of multi-scenario models.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CutPasses">
            <summary>
            Maximum number of cut passes performed during cut generation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PrePasses">
            <summary>
            Presolve pass limit. Controls the number of passes performed by presolve. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.BarHomogeneous">
            <summary>
            Determines whether the homogeneous algorithm is used when solving a model using barrier.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.VarBranch">
            <summary>
            Branch variable selection strategy.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CSBatchMode">
            <summary>
            When set to 1, enable the local creation of models, and later submit batch-optimization jobs to the Cluster Manager. Note that if CSBatchMode is enabled, only batch-optimization calls are allowed.  You must set this parameter through either a gurobi.lic file (using CSBATCHMODE=1) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.DistributedMIPJobs">
            <summary>
            Determines whether distributed MIP is used. A value of 'n' causes the MIP solver to divide the work of solving the MIP model among 'n' worker machines. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PreDepRow">
            <summary>
            Determines whether presolve attempts to remove linearly dependent rows from the model. By default, the dependent row reduction is on for continuous models and off for MIP models.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.BranchDir">
            <summary>
            Branch direction. Modify the order in which MIP nodes are explored in the branch-and-cut search. After processing a node, the default setting chooses the more promising child node to explore next. A setting of -1 will always explore the down branch first, while a setting of 1 will always explore the up branch first.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PreQLinearize">
            <summary>
            Controls presolve Q matrix linearization. Options 1 and 2 attempt to linearize quadratic constraints or a quadratic objective.  Option 1 focuses on getting a strong LP relaxation. Option 2 aims for a compact relaxation.  Option 0 always leaves Q matrices unmodified.  The default setting (-1) chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.IgnoreNames">
            <summary>
            Indicates whether to ignore names provided by users.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.TuneTrials">
            <summary>
            The number of tuning trials. Performance on a MIP model can sometimes experience significant variations due to random effects. As a result, the tuning tool may return parameter sets that improve on the baseline only due to randomness. This parameter allows you to perform multiple solves for each parameter set, using different random number seeds for each, in order to reduce the influence of randomness on the results.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.NormAdjust">
            <summary>
            The pricing norm variant. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.PreCrush">
            <summary>
            Determines whether presolve translates constraints on the original model to equivalent constraints on the presolved model. Enable this when you are using callbacks to add your own cuts.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.Disconnected">
            <summary>
            Disconnected component strategy. A MIP model can sometimes be made up of multiple, completely independent sub-models. This parameter controls how aggressively we try to exploit this structure. A value of 0 ignores this structure entirely, while larger values try more aggressive approaches. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.BarCorrectors">
            <summary>
            The number of central corrections applied during the barrier solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CliqueCuts">
            <summary>
            Clique cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MIPFocus">
            <summary>
            Focus of MIP search. Allows you to change the focus to finding feasible solution, proving optimality, or moving the objective bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.FuncPieces">
            <summary>
            Control PWL translation of general function constraints without own options specified, whether to use equal piece length, to limit error or to limit the total number of pieces.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.RLTCuts">
            <summary>
            RLT cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ScaleFlag">
            <summary>
            The model scaling.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.LogToConsole">
            <summary>
            Indicates whether the Gurobi log should be sent to the console.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.MIPSepCuts">
            <summary>
            MIP separation cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CutAggPasses">
            <summary>
            Maximum number of aggregation passes performed during cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CoverCuts">
            <summary>
            Cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.NonConvex">
            <summary>
            Controls how to deal with non-convex quadratic programs.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.CSTLSInsecure">
            <summary>
            Use insecure mode in TLS for Compute Server.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntParam.ProjImpliedCuts">
            <summary>
            Projected implied bound cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.StringParam">
            <summary>
            List of string-valued parameters.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CloudHost">
            <summary>
            Host for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.UserName">
            <summary>
            User Name for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSAPIAccessID">
            <summary>
            Access ID for Gurobi Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSAPIACCESSID=YOUR_API_ID) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.JobID">
            <summary>
            Job ID for Compute Server job.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.LogFile">
            <summary>
            The name of the Gurobi log file.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSAuthToken">
            <summary>
            When a client authenticates with a Cluster Manager using a username and password, a signed token is returned by the server to be used in further calls or command-line operations. It is used internally.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.TokenServer">
            <summary>
            Name of token server.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.SolFiles">
            <summary>
            Location to store intermediate solution files.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.ResultFile">
            <summary>
            Result file to write when optimization is complete.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.NodefileDir">
            <summary>
            Directory in which MIP node files are stored.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.ServerPassword">
            <summary>
            Client password for Remote Services cluster.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CloudPool">
            <summary>
            Cloud pool to use for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.ComputeServer">
            <summary>
            Name of a node in the Remote Services cluster.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSManager">
            <summary>
            URL of the Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSMANAGER=YOUR_MANAGER_URL) or empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CloudAccessID">
            <summary>
            Access ID for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSRouter">
            <summary>
            Router node for Remote Services cluster.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSAppName">
            <summary>
            The application name which will be sent to the server to track which application is submitting the batches or jobs.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.WorkerPool">
            <summary>
            The cluster that will provide the distributed workers. When using a distributed parallel algorithm (distributed MIP, distributed concurrent, or distributed tuning), use this parameter to provide a comma-separated list of machines, each of which should be a member of a Remote Services cluster. The password for these workers should be provided via the WorkerPassword parameter. Use the ConcurrentJobs or TuneJobs parameters to indicate how many total jobs should be launched on these workers.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSGroup">
            <summary>
            Group placement request for cluster.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CSAPISecret">
            <summary>
            Secret key for Gurobi Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSAPISECRET=YOUR_API_SECRET_KEY) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.CloudSecretKey">
            <summary>
            Secret Key for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringParam.WorkerPassword">
            <summary>
            The password for the distributed workers. When using a distributed parallel algorithm (distributed MIP, distributed concurrent, or distributed tuning), this parameter is used to provide the password for the distributed workers that will be used. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.IntAttr">
            <summary>
            List of integer-valued attributes.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ModelSense">
            <summary>
            Optimization sense (+1 for minimize, -1 for maximize).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.VarPreStat">
            <summary>
            Status of variable in presolved model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumQNZs">
            <summary>
            The number of non-zero coefficients in the quadratic objective.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.DualSVioIndex">
            <summary>
            Index of the variable with the largest (scaled) reduced cost violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.BranchPriority">
            <summary>
            Branching priority.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumStart">
            <summary>
            Number of MIP starts.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IsMultiObj">
            <summary>
            Indicates whether the model has multiple objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.DualResidualIndex">
            <summary>
            Index of the variable with the largest (unscaled) dual constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISConstr">
            <summary>
            Indicates whether the constraint participates in the IIS.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.SolCount">
            <summary>
            Number of stored solutions.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.TuneResultCount">
            <summary>
            Number of improved parameter sets found by the tuning tool.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.DualSResidualIndex">
            <summary>
            Index of the variable with the largest (scaled) dual constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISGenConstr">
            <summary>
            Indicates whether the general constraint participates in the IIS.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumScenarios">
            <summary>
            Number of scenarios in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.Status">
            <summary>
            Current optimization status of the model (see GRB.Status).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.Lazy">
            <summary>
            Determines whether a constraint is treated as a lazy constraint.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISSOS">
            <summary>
            Indicates whether the SOS constraint participates in the IIS.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISLB">
            <summary>
            Indicates whether the lower bound participate in the IIS.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISUB">
            <summary>
            Indicates whether the upper bound participate in the IIS.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.LicenseExpiration">
            <summary>
            License expiration date.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IsQP">
            <summary>
            Indicates whether the model is a QP/MIQP.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ConstrResidualIndex">
            <summary>
            Index of the constraint with the largest (unscaled) primal constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISMinimal">
            <summary>
            Indicates whether the current IIS is minimal.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.GenConstrType">
            <summary>
            General constraint type.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.VarHintPri">
            <summary>
            The MIP hint priority.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.DualVioIndex">
            <summary>
            Index of the variable with the largest (unscaled) reduced cost violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.BatchErrorCode">
            <summary>
            Error code for the batch object, if any.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumVars">
            <summary>
            The number of variables in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.BatchStatus">
            <summary>
            Status of the Batch Request in the Cluster Manager.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.BarIterCount">
            <summary>
            Number of barrier iterations performed in most recent optimization.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumSOS">
            <summary>
            The number of SOS constraints in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.Partition">
            <summary>
            Variable partition number.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.PWLObjCvx">
            <summary>
            Indicates whether the variable has a convex piecewise-linear objective.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.BoundVioIndex">
            <summary>
            Index of the variable with the largest (unscaled) bound violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ComplVioIndex">
            <summary>
            Index of the variable with the largest complementarity violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumObj">
            <summary>
            Number of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ConstrSResidualIndex">
            <summary>
            Index of the constraint with the largest (scaled) primal constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ConstrSVioIndex">
            <summary>
            Index of the constraint with the largest (scaled) violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IsMIP">
            <summary>
            Indicates whether the model is a MIP.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IISQConstr">
            <summary>
            Indicates whether the quadratic constraint participates in the IIS.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.BoundSVioIndex">
            <summary>
            Index of the variable with the largest (scaled) bound violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IntVioIndex">
            <summary>
            Index of the variable with the largest integrality violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ObjNPriority">
            <summary>
            Priorities of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.CBasis">
            <summary>
            Basis status.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.FuncPieces">
            <summary>
            Control PWL translation whether to use equal piece length, to limit error or to limit the total number of pieces.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumQCNZs">
            <summary>
            The number of non-zero coefficients in the quadratic constraints (includes both the linear and quadratic terms).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumQConstrs">
            <summary>
            The number of quadratic constraints in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.ConstrVioIndex">
            <summary>
            Index of the constraint with the largest (unscaled) violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumIntVars">
            <summary>
            The number of integer variables in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumNZs">
            <summary>
            The number of non-zero coefficients in the constraint matrix.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumGenConstrs">
            <summary>
            The number of general constraints in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumConstrs">
            <summary>
            The number of linear constraints in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumBinVars">
            <summary>
            The number of binary variables in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.IsQCP">
            <summary>
            Indicates whether the model is a QCP/MIQCP.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.VBasis">
            <summary>
            Basis status.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.IntAttr.NumPWLObjVars">
            <summary>
            The number of variables with piecewise-linear objective functions.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.CharAttr">
            <summary>
            List of character-valued attributes.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.CharAttr.VType">
            <summary>
            Variable type (GRB.CONTINUOUS, GRB.BINARY, GRB.INTEGER, GRB.SEMICONT, or GRB.SEMIINT).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.CharAttr.QCSense">
            <summary>
            Quadratic constraint sense (GRB.LESS_EQUAL, GRB.GREATER_EQUAL, or GRB.EQUAL).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.CharAttr.Sense">
            <summary>
            Constraint sense (GRB.LESS_EQUAL, GRB.GREATER_EQUAL, or GRB.EQUAL).
            </summary>
        </member>
        <member name="T:Gurobi.GRB.DoubleAttr">
            <summary>
            List of double-valued attributes.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.PStart">
            <summary>
            Simplex start vector.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.KappaExact">
            <summary>
            Exact basis condition number.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualVioSum">
            <summary>
            Sum of (unscaled) reduced cost violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SARHSLow">
            <summary>
            Right-hand-side sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjNAbsTol">
            <summary>
            Absolute tolerances of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualSVioSum">
            <summary>
            Sum of (scaled) reduced cost violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjNCon">
            <summary>
            Constant terms of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinRHS">
            <summary>
            Minimum (non-zero) linear constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.BoundSVioSum">
            <summary>
            Sum of (scaled) bound violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinBound">
            <summary>
            Minimum finite variable bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.FuncPieceLength">
            <summary>
            Piece length for PWL translation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.RC">
            <summary>
            Reduced cost.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrSResidualSum">
            <summary>
            Sum of (scaled) primal constraint errors.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualSVio">
            <summary>
            Maximum (scaled) reduced cost violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.FuncPieceError">
            <summary>
            Error allowed for PWL translation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Slack">
            <summary>
            Slack in the current solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNLB">
            <summary>
            Modification to lower bounds of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.BoundVio">
            <summary>
            Maximum (unscaled) bound violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNUB">
            <summary>
            Modification to upper bounds of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Xn">
            <summary>
            Value in a sub-optimal MIP solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNX">
            <summary>
            Value in the current solution of the current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.X">
            <summary>
            Value in the current solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjN">
            <summary>
            Variable objective coefficient of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Start">
            <summary>
            The MIP start value (for constructing an initial MIP solution).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.RHS">
            <summary>
            Right-hand side value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.IntVio">
            <summary>
            Maximum integrality violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjCon">
            <summary>
            Constant offset of the objective function.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinQCCoeff">
            <summary>
            Minimum (non-zero) quadratic constraint coefficient in quadratic part (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualVio">
            <summary>
            Maximum (unscaled) reduced cost violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.NodeCount">
            <summary>
            Number of branch-and-cut nodes explored in most recent optimization.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxObjCoeff">
            <summary>
            Maximum linear objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SALBLow">
            <summary>
            Lower bound sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualSResidualSum">
            <summary>
            Sum of (scaled) dual constraint errors.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Pi">
            <summary>
            Dual value (also known as the shadow price).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ComplVio">
            <summary>
            Maximum complementarity violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.QCSlack">
            <summary>
            Slack value of the quadratic constraint in the current solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SAObjUp">
            <summary>
            Objective coefficient sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Obj">
            <summary>
            Variable objective coefficient.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.FuncPieceRatio">
            <summary>
            Control whether to link function values or to have pieces below or above the function.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.BarX">
            <summary>
            Value in the best barrier iterate (before crossover).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxCoeff">
            <summary>
            Maximum constraint matrix coefficient (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.FarkasDual">
            <summary>
            The Farkas infeasibility proof.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.PoolObjVal">
            <summary>
            Objective value of stored alternate MIP solutions.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SARHSUp">
            <summary>
            Right-hand-side sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjNWeight">
            <summary>
            Weights of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SAUBUp">
            <summary>
            Upper bound sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxBound">
            <summary>
            Maximum finite variable bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.QCPi">
            <summary>
            Dual value of the quadratic constraint.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNObj">
            <summary>
            Modification to objective coefficients of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.UB">
            <summary>
            Variable upper bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjBound">
            <summary>
            Best available objective bound (lower bound for minimization, upper bound for maximization).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualSResidual">
            <summary>
            Maximum (scaled) dual constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjBoundC">
            <summary>
            Best available objective bound, without rounding (lower bound for minimization, upper bound for maximization.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualResidual">
            <summary>
            Maximum (unscaled) dual constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrVio">
            <summary>
            Maximum (unscaled) constraint violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinObjCoeff">
            <summary>
            Minimum (non-zero) linear objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.PoolObjBound">
            <summary>
            Bound on the best objective for an as-yet undiscovered solution (lower bound for minimization, upper bound for maximization).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxQCCoeff">
            <summary>
            Maximum quadratic constraint coefficient in quadratic part (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinQCRHS">
            <summary>
            Minimum (non-zero) quadratic constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxRHS">
            <summary>
            Maximum linear constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SAUBLow">
            <summary>
            Upper bound sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.QCRHS">
            <summary>
            Right-hand side value of the quadratic constraint.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNRHS">
            <summary>
            Modification to right hand sides of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrResidual">
            <summary>
            Maximum (unscaled) primal constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinQCLCoeff">
            <summary>
            Minimum (non-zero) quadratic constraint coefficient in linear part (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.IterCount">
            <summary>
            Number of simplex iterations performed in most recent optimization.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.BoundVioSum">
            <summary>
            Sum of (unscaled) bound violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrSVio">
            <summary>
            Maximum (scaled) constraint violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SAObjLow">
            <summary>
            Objective coefficient sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DualResidualSum">
            <summary>
            Sum of (unscaled) dual constraint errors.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrVioSum">
            <summary>
            Sum of (unscaled) constraint violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxQCLCoeff">
            <summary>
            Maximum quadratic constraint coefficient in linear part (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Kappa">
            <summary>
            Estimated basis condition number.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrSVioSum">
            <summary>
            Sum of (scaled) constraint violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.LB">
            <summary>
            Variable lower bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjNRelTol">
            <summary>
            Relative tolerances of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrSResidual">
            <summary>
            Maximum (scaled) primal constraint error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.SALBUp">
            <summary>
            Lower bound sensitivity information.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.IntVioSum">
            <summary>
            Sum of integrality violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxQObjCoeff">
            <summary>
            Maximum quadratic objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.PreFixVal">
            <summary>
            The value of the variable (for variables fixed by presolve).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MaxQCRHS">
            <summary>
            Maximum quadratic constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinCoeff">
            <summary>
            Minimum (non-zero) constraint matrix coefficient (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.DStart">
            <summary>
            Simplex start vector.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MinQObjCoeff">
            <summary>
            Minimum (non-zero) quadratic objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjVal">
            <summary>
            Objective value of the current solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.VarHintVal">
            <summary>
            The MIP hint value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.FarkasProof">
            <summary>
            Magnitude of infeasibility violation in Farkas infeasibility proof.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.MIPGap">
            <summary>
            Current relative MIP optimality gap.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.Runtime">
            <summary>
            Runtime of the most recent optimization.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ConstrResidualSum">
            <summary>
            Sum of (unscaled) primal constraint errors.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.BoundSVio">
            <summary>
            Maximum (scaled) bound violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.UnbdRay">
            <summary>
            Unbounded ray.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ComplVioSum">
            <summary>
            Sum of complementarity violations.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ObjNVal">
            <summary>
            Objective value for multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNObjBound">
            <summary>
            Objective bound of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.DoubleAttr.ScenNObjVal">
            <summary>
            Objective value of current solution of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.StringAttr">
            <summary>
            List of string-valued attributes.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.CTag">
            <summary>
            Tag string for constraints (each defined constraint tag MUST be unique).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.ConstrName">
            <summary>
            Constraint name.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.ModelName">
            <summary>
            Model name.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.QCTag">
            <summary>
            Tag string for quadratic constraints (each defined quadratic constraint tag MUST be unique).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.ObjNName">
            <summary>
            Names of multi-objectives.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.VarName">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.VTag">
            <summary>
            Tag string for variables (each defined variable tag MUST be unique).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.GenConstrName">
            <summary>
            General constraint name.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.JobID">
            <summary>
            Job ID for Compute Server job.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.BatchID">
            <summary>
            Batch ID for Cluster Manager Batch Request.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.QCName">
            <summary>
            Quadratic constraint name.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.Server">
            <summary>
            Name of server for Compute Server job.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.BatchErrorMessage">
            <summary>
            Error message for the batch object, if any.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.StringAttr.ScenNName">
            <summary>
            Name of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.Status">
            <summary>
            Optimization status codes
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.LOADED">
            <summary>
            Model is loaded, but no solution information is available.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.OPTIMAL">
            <summary>
            Model was solved to optimality (subject to tolerances) and an optimal
            solution is available.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.INFEASIBLE">
            <summary>
            Model was proven to be infeasible.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.INF_OR_UNBD">
            <summary>
            Model was proven to be either infeasible or unbounded.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.UNBOUNDED">
            <summary>
            Model was proven to be unbounded.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.CUTOFF">
            <summary>
            Optimal objective was proven to be worse than the value specified
            in the Cutoff parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.ITERATION_LIMIT">
            <summary>
            Optimization terminated because the total number of simplex
            iterations performed exceeded the limit specified in the IterationLimit
            parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.NODE_LIMIT">
            <summary>
            Optimization terminated because the total number of branch-and-cut
            nodes explored exceeded the limit specified in the NodeLimit
            parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.TIME_LIMIT">
            <summary>
            Optimization terminated because the total elapsed time
            exceeded the limit specified in the TimeLimit parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.SOLUTION_LIMIT">
            <summary>
            Optimization terminated because the number of solutions found
            reached the value specified in the SolutionLimit parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.INTERRUPTED">
            <summary>
            Optimization was terminated by the user.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.NUMERIC">
            <summary>
            Optimization was terminated due to unrecoverable numerical
            difficulties.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.SUBOPTIMAL">
            <summary>
            Optimization terminated with a sub-optimal solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.INPROGRESS">
            <summary>
            Optimization is still in progress.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Status.USER_OBJ_LIMIT">
            <summary>
            User specified objective limit (a bound on either the best objective
            or the best bound), and that limit has been reached.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.BatchStatus">
            <summary>
            Batch status codes
            </summary>
        </member>
        <member name="F:Gurobi.GRB.BatchStatus.CREATED">
            <summary>
            Batch object was created, but is not ready to be scheduled.
            See the Batch Optimization section of the manual for more details.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.BatchStatus.SUBMITTED">
            <summary>
            The Batch object has been completely specified, and now is waiting
            for a job to finish processing the request.
            See the Batch Optimization section of the manual for more details.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.BatchStatus.ABORTED">
            <summary>
            Batch processing was aborted by the user.
            See the Batch Optimization section of the manual for more details.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.BatchStatus.FAILED">
            <summary>
            Batch processing failed.
            See the Batch Optimization section of the manual for more details.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.BatchStatus.COMPLETED">
            <summary>
            A Batch Job successfully processed the Batch request.
            See the Batch Optimization section of the manual for more details.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.VERSION_MAJOR">
            <summary>
            Major number
            </summary>
        </member>
        <member name="F:Gurobi.GRB.VERSION_MINOR">
            <summary>
            Minor number
            </summary>
        </member>
        <member name="F:Gurobi.GRB.VERSION_TECHNICAL">
            <summary>
            Technical number
            </summary>
        </member>
        <member name="F:Gurobi.GRB.BASIC">
            <summary>
            Variable is basic.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.NONBASIC_LOWER">
            <summary>
            Variable is non-basic at lower bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.NONBASIC_UPPER">
            <summary>
            Variable is non-basic at upper bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.SUPERBASIC">
            <summary>
            Variable is superbasic.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.Callback">
            <summary>
            Gurobi callback codes.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.POLLING">
            <summary>
            Periodic polling callback.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.PRESOLVE">
            <summary>
            Currently performing presolve.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.SIMPLEX">
            <summary>
            Currently in simplex.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP">
            <summary>
            Currently in MIP.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL">
            <summary>
            Found a new MIP incumbent.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE">
            <summary>
            Currently exploring a MIP node.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER">
            <summary>
            Currently in barrier.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MESSAGE">
            <summary>
            Printing a log message.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MULTIOBJ">
            <summary>
            Currently in multi-objective optimization.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.PRE_COLDEL">
            <summary>
            Returns the number of columns removed by presolve to this point.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.PRE_ROWDEL">
            <summary>
            Returns the number of rows removed by presolve to this point.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.PRE_SENCHG">
            <summary>
            Returns the number of constraint senses changed by presolve to this
            point.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.PRE_BNDCHG">
            <summary>
            Returns the number of bounds changed by presolve to this point.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.PRE_COECHG">
            <summary>
            Returns the number of coefficients changed by presolve to this point.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.SPX_ITRCNT">
            <summary>
            Returns the current simplex iteration count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.SPX_OBJVAL">
            <summary>
            Returns the current simplex objective value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.SPX_PRIMINF">
            <summary>
            Returns the current simplex primal infeasibility.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.SPX_DUALINF">
            <summary>
            Returns the current simplex dual infeasibility.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.SPX_ISPERT">
            <summary>
            Returns 1 if the model has been perturbed.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_OBJBST">
            <summary>
            Returns the current best objective value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_OBJBND">
            <summary>
            Returns the current best objective bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_NODCNT">
            <summary>
            Returns the current explored node count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_SOLCNT">
            <summary>
            Returns the current solution count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_CUTCNT">
            <summary>
            Returns the current cutting plane count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_NODLFT">
            <summary>
            Returns the current unexplored node count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIP_ITRCNT">
            <summary>
            Returns the current simplex iteration count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL_SOL">
            <summary>
            Returns the new solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL_OBJ">
            <summary>
            Returns the objective value for the new solution.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL_OBJBST">
            <summary>
            Returns the current best objective value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL_OBJBND">
            <summary>
            Returns the current best objective bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL_NODCNT">
            <summary>
            Returns the current explored node count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPSOL_SOLCNT">
            <summary>
            Returns the current solution count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_STATUS">
            <summary>
            Returns the status of the current node relaxation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_REL">
            <summary>
            Returns the current node relaxation solution or ray.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_OBJBST">
            <summary>
            Returns the current best objective value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_OBJBND">
            <summary>
            Returns the current best objective bound.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_NODCNT">
            <summary>
            Returns the current explored node count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_SOLCNT">
            <summary>
            Returns the current solution count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MIPNODE_BRVAR">
            <summary>
            Returns the branching variable for the current node.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER_ITRCNT">
            <summary>
            Returns the current barrier iteration count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER_PRIMOBJ">
            <summary>
            Returns the current barrier primal objective value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER_DUALOBJ">
            <summary>
            Returns the current barrier dual objective value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER_PRIMINF">
            <summary>
            Returns the current barrier primal infeasibility.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER_DUALINF">
            <summary>
            Returns the current barrier dual infeasibility.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.BARRIER_COMPL">
            <summary>
            Returns the current barrier complementarity violation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MSG_STRING">
            <summary>
            Returns the message that is being printed.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.RUNTIME">
            <summary>
            Returns the elapsed solver runtime (in seconds).
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MULTIOBJ_OBJCNT">
            <summary>
            Returns the current objective count already optimized.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MULTIOBJ_SOLCNT">
            <summary>
            Returns the current solution count.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Callback.MULTIOBJ_SOL">
            <summary>
            Returns the new solution.
            </summary>
        </member>
        <member name="T:Gurobi.GRB.Error">
            <summary>
            Gurobi error codes.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.OUT_OF_MEMORY">
            <summary>
            Available memory was exhausted.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NULL_ARGUMENT">
            <summary>
            NULL input value provided for a required argument.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.INVALID_ARGUMENT">
            <summary>
            Invalid input value.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.UNKNOWN_ATTRIBUTE">
            <summary>
            Tried to query or set an unknown attribute.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.DATA_NOT_AVAILABLE">
            <summary>
            Tried to query or set an attribute that could not be accessed.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.INDEX_OUT_OF_RANGE">
            <summary>
            Index for attribute query was out of range.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.UNKNOWN_PARAMETER">
            <summary>
            Tried to query or set an unknown parameter.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.VALUE_OUT_OF_RANGE">
            <summary>
            Tried to set a parameter to a value that is outside its valid range.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NO_LICENSE">
            <summary>
            Failed to obtain a Gurobi license.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.SIZE_LIMIT_EXCEEDED">
            <summary>
            Attempted to solve a model that is larger than the limit for a
            trial license.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.CALLBACK">
            <summary>
            Problem in callback.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.FILE_READ">
            <summary>
            Failed to read the requested file.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.FILE_WRITE">
            <summary>
            Failed to write the requested file.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NUMERIC">
            <summary>
            Numerical error during requested operation.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.IIS_NOT_INFEASIBLE">
            <summary>
            Attempted to perform infeasibility analysis on a feasible model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NOT_FOR_MIP">
            <summary>
            Requested operation not valid for a MIP model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.OPTIMIZATION_IN_PROGRESS">
            <summary>
            Tried to access a model while optimization was in progress.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.DUPLICATES">
            <summary>
            Constraint, variable, or SOS contained duplicate indices.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NODEFILE">
            <summary>
            Error in reading or writing a MIP node file.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.Q_NOT_PSD">
            <summary>
            non-PSD Q matrix in the objective or in a quadratic constraint.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.QCP_EQUALITY_CONSTRAINT">
            <summary>
            Equality quadratic constraints.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NETWORK">
            <summary>
            Network error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.JOB_REJECTED">
            <summary>
            Job rejected from Compute Server queue.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NOT_SUPPORTED">
            <summary>
            Operation is not supported in the current usage environment.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.EXCEED_2B_NONZEROS">
            <summary>
            Result is larger than return value allows.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.INVALID_PIECEWIE_OBJ">
            <summary>
            Problem with piecewise-linear objective function.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.UPDATEMODE_CHANGE">
            <summary>
            Not allowed to change UpdateMode parameter once model
            has been created.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.CLOUD">
            <summary>
            Problem launching Instant Cloud job.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.MODEL_MODIFICATION">
            <summary>
            An error occurred during model modification or update.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.CSWORKER">
            <summary>
            An error occured with the client-server application.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.TUNE_MODEL_TYPES">
            <summary>
            Multi-model tuning invoked on models of different types.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.SECURITY">
            <summary>
            Multi-model tuning invoked on models of different types.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.NOT_IN_MODEL">
            <summary>
            Tried to access a constraint or variable that is not in the model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.FAILED_TO_CREATE_MODEL">
            <summary>
            Failed to create the requested model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.Error.INTERNAL">
            <summary>
            Internal Gurobi error.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.METHOD_AUTO">
            <summary>
            Constant for Method parameter -
            choose method automatically.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.METHOD_PRIMAL">
            <summary>
            Constant for Method and NodeMethod parameters -
            use primal simplex.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.METHOD_DUAL">
            <summary>
            Constant for Method and NodeMethod parameters -
            use dual simplex.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.METHOD_BARRIER">
            <summary>
            Constant for Method and NodeMethod parameters -
            use barrier.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.METHOD_CONCURRENT">
            <summary>
            Constant for Method parameters - use concurrent optimizer.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.METHOD_DETERMINISTIC_CONCURRENT">
            <summary>
            Constant for Method parameter - use deterministic concurrent optimizer.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.FEASRELAX_LINEAR">
            <summary>
            minimize linearly weighted sum of penalties for feasrelax model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.FEASRELAX_QUADRATIC">
            <summary>
            minimize quadratically weighted sum of penalties for feasrelax model.
            </summary>
        </member>
        <member name="F:Gurobi.GRB.FEASRELAX_CARDINALITY">
            <summary>
            minimize weighted cardinality of relaxations for feasrelax model.
            </summary>
        </member>
        <member name="T:Gurobi.GRBBatch">
            <summary>
            Gurobi batch object. A batch object provides a handle to Batch Requests stored in the Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBBatch.BatchErrorCode">
            <summary>
            Gets the error code for the batch object, if any.
            </summary>
        </member>
        <member name="P:Gurobi.GRBBatch.BatchErrorMessage">
            <summary>
            Gets the error message for the batch object, if any.
            </summary>
        </member>
        <member name="P:Gurobi.GRBBatch.BatchID">
            <summary>
            Gets the batch ID for Cluster Manager Batch Request.
            </summary>
        </member>
        <member name="P:Gurobi.GRBBatch.BatchStatus">
            <summary>
            Gets the status of the Batch Request in the Cluster Manager.
            </summary>
        </member>
        <member name="M:Gurobi.GRBBatch.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Retrieve the value of an integer-valued attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBBatch.Get(Gurobi.GRB.StringAttr)">
            <summary>
            Retrieve the value of a string-valued attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBBatch.#ctor(Gurobi.GRBEnv,System.String)">
            <summary>
            Batch constructor.
            </summary>
            <param name="batchID">Identifier of the batch request.</param>
            <param name="xenv">Environment for new batch.</param>
        </member>
        <member name="M:Gurobi.GRBBatch.Finalize">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBBatch.Dispose">
            <summary>
            Release the resources associated with a GRBBatch object.
            </summary>
        </member>
        <member name="M:Gurobi.GRBBatch.Abort">
            <summary>
            Instructs the manager to abort the processing of the associated
            batch request, changing its status to
            <see cref="F:Gurobi.GRB.BatchStatus.ABORTED"/></summary>
        </member>
        <member name="M:Gurobi.GRBBatch.Retry">
            <summary>
            This method instructs the manager to retry optimization of a
            failed or aborted batch request, changing its status to
            <see cref="F:Gurobi.GRB.BatchStatus.SUBMITTED"/>.
            </summary>
        </member>
        <member name="M:Gurobi.GRBBatch.Discard">
            <summary>
            This method instruct the manager to remove all information
            related to the batch object in question, including the stored
            solution if available. Further queries for the associated
            batch object will fail with the code
            GRB_ERROR_DATA_NOT_AVAILABLE. Use this function with
            extreme care, as the removed information cannot be
            recovered later on.
            </summary>
        </member>
        <member name="M:Gurobi.GRBBatch.Update">
            <summary>
            Update all attributes from the manager.  The attributes of
            Batch objects are locally cached; use this method to retrieve
            the latest values from the cluster manager.
            </summary>
        </member>
        <member name="M:Gurobi.GRBBatch.GetJSONSolution">
            <summary>
            This method queries the stored solution of a completed batch
            object from a Cluster Manager. The solution is returned
            as a JSON string, (see the reference manual for futher
            details on the format). Note that for this call to succeed,
            the status of the batch request must be
            <see cref="F:Gurobi.GRB.BatchStatus.COMPLETED"/>.
            </summary>
            <returns>A JSON string representation to the current
            solution.</returns>
        </member>
        <member name="M:Gurobi.GRBBatch.WriteJSONSolution(System.String)">
            <summary>
            This method queries the stored solution of a completed batch
            object from a Cluster Manager. The solution is returned as a JSON
            string, and it is stored in the given filename (see the reference
            manual for futher details on the format). Note that for this call
            to succeed, the status of the batch request must be
            <see cref="F:Gurobi.GRB.BatchStatus.COMPLETED"/>.
            </summary>
            <param name="filename">Name of the file where to store the
            JSON string. It must end with the extension ".json.gz".</param>
        </member>
        <member name="T:Gurobi.GRBCallback">
            <summary>Gurobi callback class.</summary>
            <remarks>
            To implement a callback, you should create a subclass of this class and
            implement the <see cref="M:Gurobi.GRBCallback.Callback"/> method. If you pass an object of this
            subclass to method <see cref="M:Gurobi.GRBModel.SetCallback(Gurobi.GRBCallback)"/> before calling
            <see cref="M:Gurobi.GRBModel.Optimize"/>, the <see cref="M:Gurobi.GRBCallback.Callback"/> method of the
            class will be called periodically.
            </remarks>
        </member>
        <member name="F:Gurobi.GRBCallback.where">
            <summary>
            Query this variable from your <see cref="M:Gurobi.GRBCallback.Callback"/> method to determine
            where the callback was called from.
            </summary>
        </member>
        <member name="M:Gurobi.GRBCallback.Callback">
            <summary>Custom callback implementation.</summary>
        </member>
        <member name="M:Gurobi.GRBCallback.GetDoubleInfo(System.Int32)">
            <summary>Request double-valued callback information.</summary>
            <param name="what">
            Information requested (see <see cref="T:Gurobi.GRB.Callback"/>).
            </param>
            <returns>Value of requested callback information.</returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetIntInfo(System.Int32)">
            <summary>Request int-valued callback information.</summary>
            <param name="what">
            Information requested (see <see cref="T:Gurobi.GRB.Callback"/>).
            </param>
            <returns>Value of requested callback information.</returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetStringInfo(System.Int32)">
            <summary>Request string-valued callback information.</summary>
            <param name="what">
            Information requested (see <see cref="T:Gurobi.GRB.Callback"/>).
            </param>
            <returns>Value of requested callback information.</returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetSolution(Gurobi.GRBVar)">
            <summary>Retrieve value from the current solution vector.</summary>
            <remarks>
            Only available when the where member variable is equal to
            <see cref="F:Gurobi.GRB.Callback.MIPSOL"/> or <see cref="F:Gurobi.GRB.Callback.MULTIOBJ"/>.
            </remarks>
            <param name="v">The variable whose value is desired.</param>
            <returns>
            The value of the specified variable in the current solution vector.
            </returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetSolution(Gurobi.GRBVar[])">
            <summary>Retrieve values from the current solution vector.</summary>
            <remarks>
            Only available when the where member variable is equal to
            <see cref="F:Gurobi.GRB.Callback.MIPSOL"/> or <see cref="F:Gurobi.GRB.Callback.MULTIOBJ"/>.
            </remarks>
            <param name="xvars">The array of variables whose values are desired.</param>
            <returns>
            The values of the specified variables in the current solution.
            </returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetSolution(Gurobi.GRBVar[0:,0:])">
            <summary>Retrieve values from the current solution vector.</summary>
            <remarks>
            Only available when the where member variable is equal to
            <see cref="F:Gurobi.GRB.Callback.MIPSOL"/> or <see cref="F:Gurobi.GRB.Callback.MULTIOBJ"/>.
            </remarks>
            <param name="xvars">The array of variables whose values are desired.</param>
            <returns>
            The values of the specified variables in the current solution.
            </returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetNodeRel(Gurobi.GRBVar)">
            <summary>
            Retrieve value from the node relaxation solution at the current node.
            </summary>
            <remarks>
            Only available when the <see cref="F:Gurobi.GRBCallback.where"/> member variable is equal to
            <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>, and <see cref="F:Gurobi.GRB.Callback.MIPNODE_STATUS"/>
            is equal to <see cref="F:Gurobi.GRB.Status.OPTIMAL"/>.
            </remarks>
            <param name="v">The variable whose value is desired.</param>
            <returns>
            The value of the specified variable in the node relaxation for the
            current node.
            </returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetNodeRel(Gurobi.GRBVar[])">
            <summary>
            Retrieve values from the node relaxation solution at the current node.
            </summary>
            <remarks>
            Only available when the <see cref="F:Gurobi.GRBCallback.where"/> member variable is equal to
            <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>, and <see cref="F:Gurobi.GRB.Callback.MIPNODE_STATUS"/>
            is equal to <see cref="F:Gurobi.GRB.Status.OPTIMAL"/>.
            </remarks>
            <param name="xvars">The array of variables whose values are desired.</param>
            <returns>
            The values of the specified variables in the node relaxation for the
            current node.
            </returns>
        </member>
        <member name="M:Gurobi.GRBCallback.GetNodeRel(Gurobi.GRBVar[0:,0:])">
            <summary>
            Retrieve values from the node relaxation solution at the current node.
            </summary>
            <remarks>
            Only available when the <see cref="F:Gurobi.GRBCallback.where"/> member variable is equal to
            <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>, and <see cref="F:Gurobi.GRB.Callback.MIPNODE_STATUS"/>
            is equal to <see cref="F:Gurobi.GRB.Status.OPTIMAL"/>.
            </remarks>
            <param name="xvars">The array of variables whose values are desired.</param>
            <returns>
            The values of the specified variables in the node relaxation for the
            current node.
            </returns>
        </member>
        <member name="M:Gurobi.GRBCallback.SetSolution(Gurobi.GRBVar,System.Double)">
            <summary>
            Import solution value for a heuristic solution.
            </summary>
            <remarks>Only available when the <see cref="F:Gurobi.GRBCallback.where"/> member variable
            is equal to <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>.
            </remarks>
            <param name="v">The variable whose values is being set.</param>
            <param name="val">The value of the variable in the new solution.</param>
        </member>
        <member name="M:Gurobi.GRBCallback.SetSolution(Gurobi.GRBVar[],System.Double[])">
            <summary>
            Import solution values for a heuristic solution.
            </summary>
            <remarks>Only available when the <see cref="F:Gurobi.GRBCallback.where"/> member variable
            is equal to <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>.
            </remarks>
            <param name="xvars">The variables whose values are being set.</param>
            <param name="sol">
            The desired values of the specified variables in the new solution.
            </param>
        </member>
        <member name="M:Gurobi.GRBCallback.UseSolution">
            <summary>
            Use imported heuristics solution values immediately, and report result.
            </summary>
            <remarks>Only available when the <see cref="F:Gurobi.GRBCallback.where"/> member variable
            is equal to <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>.
            </remarks>
        </member>
        <member name="M:Gurobi.GRBCallback.AddCut(Gurobi.GRBTempConstr)">
            <summary>
            Add a cutting plane to the MIP model.
            </summary>
            <remarks>
            This method can only be invoked when the <see cref="F:Gurobi.GRBCallback.where"/> member
            variable is equal to <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>
            </remarks>
            <param name="constr">
            Temporary constraint object, created by an overloaded
            comparison operator.
            </param>
        </member>
        <member name="M:Gurobi.GRBCallback.AddCut(Gurobi.GRBLinExpr,System.Char,System.Double)">
            <summary>
            Add a cutting plane to the MIP model.
            </summary>
            <remarks>
            This method can only be invoked when the <see cref="F:Gurobi.GRBCallback.where"/> member
            variable is equal to <see cref="F:Gurobi.GRB.Callback.MIPNODE"/>
            </remarks>
            <param name="expr">
            Left-hand side expression for new cutting plane.
            </param>
            <param name="sense">
            Sense for new cutting plane (<see cref="F:Gurobi.GRB.LESS_EQUAL"/>,
            <see cref="F:Gurobi.GRB.EQUAL"/>, or <see cref="F:Gurobi.GRB.GREATER_EQUAL"/>).
            </param>
            <param name="rhs">Right-hand side value for new cutting plane.</param>
        </member>
        <member name="M:Gurobi.GRBCallback.AddLazy(Gurobi.GRBTempConstr)">
            <summary>
            Add a lazy constraint to the MIP model.
            </summary>
            <remarks>
            This method can only be invoked when the <see cref="F:Gurobi.GRBCallback.where"/> member variable
            is <see cref="F:Gurobi.GRB.Callback.MIPNODE"/> or <see cref="F:Gurobi.GRB.Callback.MIPSOL"/>.
            </remarks>
            <param name="constr">
            Temporary constraint object, created by an overloaded
            comparison operator.
            </param>
        </member>
        <member name="M:Gurobi.GRBCallback.AddLazy(Gurobi.GRBLinExpr,System.Char,System.Double)">
            <summary>
            Add a lazy constraint to the MIP model.
            </summary>
            <remarks>
            This method can only be invoked when the <see cref="F:Gurobi.GRBCallback.where"/> member variable
            is <see cref="F:Gurobi.GRB.Callback.MIPNODE"/> or <see cref="F:Gurobi.GRB.Callback.MIPSOL"/>.
            </remarks>
            <param name="expr">
            Left-hand side expression for new lazy constraint.
            </param>
            <param name="sense">
            Sense for new lazy constraint (<see cref="F:Gurobi.GRB.LESS_EQUAL"/>,
            <see cref="F:Gurobi.GRB.EQUAL"/>, or <see cref="F:Gurobi.GRB.GREATER_EQUAL"/>).
            </param>
            <param name="rhs">Right-hand side value for new lazy constraint.</param>
        </member>
        <member name="M:Gurobi.GRBCallback.Abort">
            <summary>
            Abort optimization.
            </summary>
            <remarks>
            When the optimization stops, the Status attribute will be equal
            to <see cref="F:Gurobi.GRB.Status.INTERRUPTED"/>.
            </remarks>
        </member>
        <member name="M:Gurobi.GRBCallback.StopOneMultiObj(System.Int32)">
            <summary>
            terminate individual optimization for the multi-objectives of the MIP model
            <remarks>
            For compute server, it needs to specify the objetive number, for which
            you want to stop the optimization. Otherwise, you either specify the number
            or use -1 to terminate the current individual optimization
            </remarks>
            </summary>
        </member>
        <member name="T:Gurobi.GRBColumn">
            <summary>
            Gurobi column class.  A column consists of a list of
            coefficient-constraint pairs.  Columns are used to represent the set
            of constraints in which a variables participates, and the associated
            coefficients.  Columns are temporary objects that typically have short
            lifespans.
            </summary>
        </member>
        <member name="M:Gurobi.GRBColumn.#ctor">
            <summary>Create an empty column. </summary>
            <returns>An empty column object</returns>
        </member>
        <member name="M:Gurobi.GRBColumn.#ctor(Gurobi.GRBColumn)">
            <summary>Copy an existing column.</summary>
            <param name="col">Existing column object.</param>
            <returns>A copy of the input column object.</returns>
        </member>
        <member name="P:Gurobi.GRBColumn.Size">
            <summary>
            Return the numbers of terms in the column.
            </summary>
        </member>
        <member name="M:Gurobi.GRBColumn.GetConstr(System.Int32)">
            <summary>
            Retrieve the constraint for term <paramref name="i"/> in the column.
            </summary>
            <param name="i">Term index</param>
            <returns>Constraint for the term at index <paramref name="i"/> in the column.</returns>
        </member>
        <member name="M:Gurobi.GRBColumn.GetCoeff(System.Int32)">
            <summary>
            Retrieve the coefficient for term <paramref name="i"/> in the column.
            </summary>
            <param name="i">Term index</param>
            <returns>Coefficient for the term at index <paramref name="i"/> in the column.</returns>
        </member>
        <member name="M:Gurobi.GRBColumn.AddTerm(System.Double,Gurobi.GRBConstr)">
            <summary>Add a term into the column.</summary>
            <param name="coeff">Coefficient for new term.</param>
            <param name="constr">Constraint for new term.</param>
        </member>
        <member name="M:Gurobi.GRBColumn.AddTerms(System.Double[],Gurobi.GRBConstr[])">
            <summary>Add multiple terms into the column.</summary>
            <param name="coeff">Coefficients for added constraints.</param>
            <param name="var">Constraints to add to column.</param>
        </member>
        <member name="M:Gurobi.GRBColumn.AddTerms(System.Double[],Gurobi.GRBConstr[],System.Int32,System.Int32)">
            <summary>Add multiple terms into the column.</summary>
            <param name="coeff">Coefficients for added constraints.</param>
            <param name="constr">Constraints to add to column.</param>
            <param name="start">The first term in the list to add.</param>
            <param name="len">The number of terms to add.</param>
        </member>
        <member name="M:Gurobi.GRBColumn.Remove(System.Int32)">
            <summary>
            Remove term <paramref name="i"/> from the column.
            </summary>
            <param name="i">Term index</param>
        </member>
        <member name="M:Gurobi.GRBColumn.Remove(Gurobi.GRBConstr)">
            <summary>
            Remove all terms involving the specified constraint from the column.
            </summary>
            <param name="c">The constraint whose term should be removed.</param>
            <returns>
            Returns <c>true</c> if the constraint appeared in the column
            (and was removed).
            </returns>
        </member>
        <member name="M:Gurobi.GRBColumn.Clear">
            <summary>
            Remove all terms from a column.
            </summary>
        </member>
        <member name="T:Gurobi.GRBConstr">
            <summary>Gurobi linear constraint class.
            Constraints are always associated with a particular model. You create a
            constraint object by adding a constraint to a model  (using
            GRBModel.AddConstr), rather than by using a GRBConstr constructor.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.CBasis">
            <summary>
            Gets or sets the basis status.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.ConstrName">
            <summary>
            Gets or sets the constraint name.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.DStart">
            <summary>
            Gets or sets the simplex start vector.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.FarkasDual">
            <summary>
            Gets the Farkas infeasibility proof.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.IISConstr">
            <summary>
            Gets a value indicating whether the constraint participates in the IIS.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.Lazy">
            <summary>
            Gets or sets a value indicating whether a constraint is treated as a lazy constraint.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.Pi">
            <summary>
            Gets the dual value (also known as the shadow price).
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.RHS">
            <summary>
            Gets or sets the right-hand side value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.SARHSLow">
            <summary>
            Gets the right-hand-side sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.SARHSUp">
            <summary>
            Gets the right-hand-side sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.Sense">
            <summary>
            Gets or sets the constraint sense (<see cref="F:Gurobi.GRB.LESS_EQUAL" />, <see cref="F:Gurobi.GRB.GREATER_EQUAL" />, or <see cref="F:Gurobi.GRB.EQUAL" />).
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.Slack">
            <summary>
            Gets the slack in the current solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.CTag">
            <summary>
            Gets or sets the tag string for constraints (each defined constraint tag MUST be unique).
            </summary>
        </member>
        <member name="P:Gurobi.GRBConstr.ScenNRHS">
            <summary>
            Gets or sets the modification to right hand sides of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBConstr.#ctor">
            <summary>Create empty constraint.</summary>
        </member>
        <member name="M:Gurobi.GRBConstr.SameAs(Gurobi.GRBConstr)">
            <summary>
            Check whether two constraint objects refer to the same constraint.
            </summary>
            <param name="c2">The other constraints.</param>
            <returns>
            <c>true</c> if the two constraint objects refer to the same
            model constraint.
            </returns>
        </member>
        <member name="P:Gurobi.GRBConstr.Index">
            <summary>
            Retrieve the index of the constraint in the model.
            </summary>
            <returns> -2: removed, -1: not in model, >= 0: index in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBConstr.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Retrieve the value of an integer-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBConstr.Get(Gurobi.GRB.CharAttr)">
            <summary>
            Retrieve the value of a character-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBConstr.Get(Gurobi.GRB.DoubleAttr)">
            <summary>
            Retrieve the value of a double-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBConstr.Get(Gurobi.GRB.StringAttr)">
            <summary>
            Retrieve the value of a string-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBConstr.Set(Gurobi.GRB.IntAttr,System.Int32)">
            <summary>
            Modify the value of an integer-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBConstr.Set(Gurobi.GRB.CharAttr,System.Char)">
            <summary>
            Modify the value of a character-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBConstr.Set(Gurobi.GRB.DoubleAttr,System.Double)">
            <summary>
            Modify the value of a double-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBConstr.Set(Gurobi.GRB.StringAttr,System.String)">
            <summary>
            Modify the value of a string-valued constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="T:Gurobi.GRBEnv">
            <summary>
            Gurobi environment object. Gurobi models are always associated with an
            environment. You must create an environment before can you create and
            populate a model. You will generally only need a single environment
            object in your program.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BarConvTol">
            <summary>
            Gets or sets the convergence tolerance for barrier solver. Optimization terminates when the relative difference between the primal and dual objective is less than this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BarQCPConvTol">
            <summary>
            Gets or sets the convergence tolerance for barrier solver when solving a QCP model. Optimization terminates when the relative difference between the primal and dual objective is less than this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BestBdStop">
            <summary>
            Gets or sets the best bound objective threshold.  Optimization stops when the best bound is at least as good as the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BestObjStop">
            <summary>
            Gets or sets the feasible solution objective threshold.  Optimization stops when the best feasible solution objective is at least as good as the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Cutoff">
            <summary>
            Gets or sets the target solution objective value. The Gurobi solver will only attempt to find solutions whose objective values are better than the specified target.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FeasRelaxBigM">
            <summary>
            Gets or sets the feasrelax BigM for the cardinality type.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FeasibilityTol">
            <summary>
            Gets or sets the primal feasibility tolerance. All constraints must be satisfied to this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FuncPieceError">
            <summary>
            Gets or sets the error allowed for PWL translation of general function constraints without own options specified.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FuncPieceLength">
            <summary>
            Gets or sets the piece length for PWL translation of general function constraints without own options specified.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FuncPieceRatio">
            <summary>
            Gets or sets a value indicating whether to link function values or to have pieces below or above the function.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FuncMaxVal">
            <summary>
            Gets or sets the maximal value for |lb| and |ub| of x and y variables of general function constraints.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Heuristics">
            <summary>
            Gets or sets the fraction of runtime spent in MIP heuristics. Larger values produce more and better feasible solutions, at a cost of slower progress in the best bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ImproveStartGap">
            <summary>
            Gets or sets the optimality gap at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ImproveStartNodes">
            <summary>
            Gets or sets the explored node count at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ImproveStartTime">
            <summary>
            Gets or sets the elapsed solver runtime at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.IntFeasTol">
            <summary>
            Gets or sets the integer feasibility tolerance. Integer variables must take values that are no more than the specified tolerance away from the nearest integer.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.IterationLimit">
            <summary>
            Gets or sets the limit on the number of simplex iterations that will be performed. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MIPGap">
            <summary>
            Gets or sets the mip optimality tolerance. Solution is declared optimal when the relative difference between the lower and upper bound is below the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MIPGapAbs">
            <summary>
            Gets or sets the mip optimality tolerance. Solution is declared optimal when the absolute different between the lower and upper bound is below the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MarkowitzTol">
            <summary>
            Gets or sets the threshold pivoting tolerance. Used to limit numerical error in the simplex algorithm. A larger value may avoid numerical problems in rare situations, but it will harm performance for most models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NodeLimit">
            <summary>
            Gets or sets the limit on the number of branch-and-bound nodes that will be explored. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NodefileStart">
            <summary>
            Gets or sets the amount of storage the MIP nodes can consume (in GB) before nodes are written to disk.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ObjScale">
            <summary>
            Gets or sets the simplex objective scaling. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.OptimalityTol">
            <summary>
            Gets or sets the dual feasibility tolerance. All dual constraints must be satisfied to this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PSDTol">
            <summary>
            Gets or sets the qp positive semi-definite tolerance. Sets a limit on the amount of diagonal perturbation that the optimizer is allowed to perform on the Q matrix in order to correct minor PSD violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PerturbValue">
            <summary>
            Gets or sets the magnitude of the simplex perturbation (when perturbation is required).
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PoolGap">
            <summary>
            Gets or sets the maximum optimality gap for stored solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreSOS1BigM">
            <summary>
            Gets or sets the largest big-M value presolve is allowed to use when converting an SOS-1 constraint into binary form.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreSOS2BigM">
            <summary>
            Gets or sets the largest big-M value presolve is allowed to use when converting an SOS-2 constraint into binary form.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TimeLimit">
            <summary>
            Gets or sets the limit on the amount of time that will be used for an optimization. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TuneTimeLimit">
            <summary>
            Gets or sets the limit on the amount of time that will be used for the tuning tool (in seconds).
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSQueueTimeout">
            <summary>
            Gets or sets the queue timeout for new jobs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.AggFill">
            <summary>
            Gets or sets the presolve aggregation fill level. This is the amount of constraint matrix fill to allow in a single aggregation step.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Aggregate">
            <summary>
            Gets or sets a value indicating whether aggregation is enabled or disabled in presolve. In rare instances, aggregation can lead to an accumulation of numerical errors. Turning it off can sometimes improve solution accuracy.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BarCorrectors">
            <summary>
            Gets or sets the number of central corrections applied during the barrier solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BarHomogeneous">
            <summary>
            Gets or sets a value indicating whether the homogeneous algorithm is used when solving a model using barrier.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BarIterLimit">
            <summary>
            Gets or sets the limit on the number of barrier iterations that will be performed. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BarOrder">
            <summary>
            Gets or sets the barrier ordering strategy. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BranchDir">
            <summary>
            Gets or sets the branch direction. Modify the order in which MIP nodes are explored in the branch-and-cut search. After processing a node, the default setting chooses the more promising child node to explore next. A setting of -1 will always explore the down branch first, while a setting of 1 will always explore the up branch first.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CliqueCuts">
            <summary>
            Gets or sets the clique cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ConcurrentJobs">
            <summary>
            Gets or sets the number of concurrent jobs for the distributed concurrent optimizer. A value of 'n' causes the concurrent optimizer to create 'n' independent models, using different parameter settings for each. Each of these models is sent to a distributed worker machine for processing. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers. The optimization terminates when the first model solves.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ConcurrentMIP">
            <summary>
            Gets or sets the number of concurrent MIP jobs. A value of 'n' causes the MIP solver to solve 'n' independent MIP models, using different parameter settings for each. The optimization terminates when the the first model solves.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CoverCuts">
            <summary>
            Gets or sets the cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Crossover">
            <summary>
            Gets or sets the type of crossover performed after barrier. By default, the algorithm choose automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CrossoverBasis">
            <summary>
            Gets or sets the type of initial crossover basis construction. The default value of 0 builds a basis quickly. Choose value 1 for a more expensive basis that is often more numerically stable.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSBatchMode">
            <summary>
            Gets or sets the when set to 1, enable the local creation of models, and later submit batch-optimization jobs to the Cluster Manager. Note that if CSBatchMode is enabled, only batch-optimization calls are allowed.  You must set this parameter through either a gurobi.lic file (using CSBATCHMODE=1) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSClientLog">
            <summary>
            Gets or sets the turns logging on or off for Compute Server. Options are off (0), only error messages (1), information and error messages (2), or (3) verbose, information, and error messages.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSIdleTimeout">
            <summary>
            Gets or sets the how much idle time before server hangs up.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSPriority">
            <summary>
            Gets or sets the job priority for Compute Server job.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSTLSInsecure">
            <summary>
            Gets or sets the use insecure mode in TLS for Compute Server.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CutAggPasses">
            <summary>
            Gets or sets the maximum number of aggregation passes performed during cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CutPasses">
            <summary>
            Gets or sets the maximum number of cut passes performed during cut generation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Cuts">
            <summary>
            Gets or sets the global cut generation control.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.DegenMoves">
            <summary>
            Gets or sets the limit on degenerate simplex moves. These moves are performed to improve the integrality of the current relaxation solution. By default, the algorithm chooses the number of moves to perform automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Disconnected">
            <summary>
            Gets or sets the disconnected component strategy. A MIP model can sometimes be made up of multiple, completely independent sub-models. This parameter controls how aggressively we try to exploit this structure. A value of 0 ignores this structure entirely, while larger values try more aggressive approaches. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.DisplayInterval">
            <summary>
            Gets or sets the frequency at which log lines are printed (in seconds).
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.DistributedMIPJobs">
            <summary>
            Gets or sets a value indicating whether distributed MIP is used. A value of 'n' causes the MIP solver to divide the work of solving the MIP model among 'n' worker machines. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.DualReductions">
            <summary>
            Gets or sets a value indicating whether dual reductions in MIP are used. Disable dual reductions if you plan to add lazy constraints. Otherwise, incorrect solutions may result.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FlowCoverCuts">
            <summary>
            Gets or sets the flow cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FlowPathCuts">
            <summary>
            Gets or sets the flow path cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.FuncPieces">
            <summary>
            Gets or sets the control PWL translation of general function constraints without own options specified, whether to use equal piece length, to limit error or to limit the total number of pieces.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.GUBCoverCuts">
            <summary>
            Gets or sets the gub cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.GomoryPasses">
            <summary>
            Gets or sets the maximum number of Gomory cut passes performed. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.IgnoreNames">
            <summary>
            Gets or sets a value indicating whether to ignore names provided by users.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.IISMethod">
            <summary>
            Gets or sets the method used to compute an Irreducible Infeasible Subsystem. Method 0 is typically much faster, but method 1 can product a much smaller IIS. Method 2 ignores the bound constraints.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ImpliedCuts">
            <summary>
            Gets or sets the implied bound cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.InfProofCuts">
            <summary>
            Gets or sets the infeasibility proof cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.JSONSolDetail">
            <summary>
            Gets or sets the controls amount of information in a JSON solution string.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.RelaxLiftCuts">
            <summary>
            Gets or sets the relax-and-lift cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.RLTCuts">
            <summary>
            Gets or sets the rlt cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.BQPCuts">
            <summary>
            Gets or sets the bqp cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.InfUnbdInfo">
            <summary>
            Gets or sets a value indicating whether additional information should be made available for infeasible or unbounded LP models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.LazyConstraints">
            <summary>
            Gets or sets a value indicating whether lazy constraints are enabled. Programs that add lazy constraints must set this parameter to 1.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.LogToConsole">
            <summary>
            Gets or sets a value indicating whether the Gurobi log should be sent to the console.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MIPFocus">
            <summary>
            Gets or sets the focus of MIP search. Allows you to change the focus to finding feasible solution, proving optimality, or moving the objective bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MIPSepCuts">
            <summary>
            Gets or sets the mip separation cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MIQCPMethod">
            <summary>
            Gets or sets the indicator to solve QCP node relaxation or to use outer approximation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MIRCuts">
            <summary>
            Gets or sets the mixed Integer Rounding (MIR) cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Method">
            <summary>
            Gets or sets the algorithm used to solve continuous linear models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MinRelNodes">
            <summary>
            Gets or sets the number of nodes to explore in the Minimum Relaxation heuristic. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MultiObjMethod">
            <summary>
            Gets or sets the warm-start method to solve for subsequent objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.MultiObjPre">
            <summary>
            Gets or sets the initial presolve on multi-objective models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ModKCuts">
            <summary>
            Gets or sets the mod-k cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NetworkCuts">
            <summary>
            Gets or sets the network cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NonConvex">
            <summary>
            Gets or sets the controls how to deal with non-convex quadratic programs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NoRelHeuristic">
            <summary>
            Gets or sets a value indicating whether the NoRel heuristic, which searches for feasible solutions to a MIP model before solving the root relaxation, should be used.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NodeMethod">
            <summary>
            Gets or sets the algorithm used to solve the MIP node relaxations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NormAdjust">
            <summary>
            Gets or sets the pricing norm variant. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NumericFocus">
            <summary>
            Gets or sets the numerical focus. This parameter controls the degree to which the code attempts to detect and manage numerical issues. The default setting (0) makes an automatic choice, with a slight preference for speed.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ObjNumber">
            <summary>
            Gets or sets the selects the objective index of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.OutputFlag">
            <summary>
            Gets or sets a value indicating whether Gurobi output should be enabled/disabled.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PartitionPlace">
            <summary>
            Gets or sets the controls when the partition heuristic runs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PoolSearchMode">
            <summary>
            Gets or sets the approach used to find solutions in the MIP search.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PoolSolutions">
            <summary>
            Gets or sets the number of solutions to store for a MIP model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreCrush">
            <summary>
            Gets or sets a value indicating whether presolve translates constraints on the original model to equivalent constraints on the presolved model. Enable this when you are using callbacks to add your own cuts.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreDepRow">
            <summary>
            Gets or sets a value indicating whether presolve attempts to remove linearly dependent rows from the model. By default, the dependent row reduction is on for continuous models and off for MIP models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreDual">
            <summary>
            Gets or sets the presolve dualization strategy for continuous models. Forming the dual of the input model can sometimes significantly reduce solution times. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreMIQCPForm">
            <summary>
            Gets or sets the format of the presolved MIQCP model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PrePasses">
            <summary>
            Gets or sets the presolve pass limit. Controls the number of passes performed by presolve. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreQLinearize">
            <summary>
            Gets or sets the controls presolve Q matrix linearization. Options 1 and 2 attempt to linearize quadratic constraints or a quadratic objective.  Option 1 focuses on getting a strong LP relaxation. Option 2 aims for a compact relaxation.  Option 0 always leaves Q matrices unmodified.  The default setting (-1) chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PreSparsify">
            <summary>
            Gets or sets the presolve matrix sparsification.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Presolve">
            <summary>
            Gets or sets the presolve level. More aggressive presolve reductions can produce a model that is easier to solve, but such reductions can be expensive.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ProjImpliedCuts">
            <summary>
            Gets or sets the projected implied bound cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.PumpPasses">
            <summary>
            Gets or sets the number of passes of the MIP feasibility pump heuristic performed. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.QCPDual">
            <summary>
            Gets or sets the indicator to compute QCP duals.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Quad">
            <summary>
            Gets or sets the quad precision computation in simplex. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.RINS">
            <summary>
            Gets or sets the frequency at which to apply the RINS heuristic. The default value of -1 is an automatic setting. A value of 0 shuts off the RINS heuristic. Setting the parameter to a positive value 'n' applies the RINS at every n-th node in the MIP search tree.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Record">
            <summary>
            Gets or sets the replay mode, which writes one or more files that capture the sequence of Gurobi commands that your program issues. These files can be replayed later using the Gurobi command-line tool.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ScaleFlag">
            <summary>
            Gets or sets the model scaling.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ScenarioNumber">
            <summary>
            Gets or sets the selects the scenario index of multi-scenario models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Seed">
            <summary>
            Gets or sets the random number seed.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ServerTimeout">
            <summary>
            Gets or sets the network timeout.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SiftMethod">
            <summary>
            Gets or sets the method to solve sifting subproblem. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Sifting">
            <summary>
            Gets or sets the dual simplex sifting strategy for LP, MIP root and MIP nodes. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SimplexPricing">
            <summary>
            Gets or sets the simplex variable pricing strategy.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SolutionLimit">
            <summary>
            Gets or sets the limit on the number of feasible solutions found by the Gurobi MIP solver. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SolutionNumber">
            <summary>
            Gets or sets the current solution number. When querying an alternate MIP solution through the Xn, ObjNVal or PoolObjVal attribute, determines which solution is retrieved.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.StartNodeLimit">
            <summary>
            Gets or sets the limit on the number of branch-and-bound nodes explored when completing a partial MIP start.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.StartNumber">
            <summary>
            Gets or sets the selects the MIP start index.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.StrongCGCuts">
            <summary>
            Gets or sets the strong Chvatal Gomory (Strong-CG) cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SubMIPCuts">
            <summary>
            Gets or sets the sub-mip cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SubMIPNodes">
            <summary>
            Gets or sets the limit on the number of nodes explored in local search heuristics.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Symmetry">
            <summary>
            Gets or sets the symmetry detection level. By default, the algorithm choose automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.Threads">
            <summary>
            Gets or sets the parallel Gurobi MIP thread count. The default value of 0 uses all of the processors in the machine.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TSPort">
            <summary>
            Gets or sets the token server port.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TuneCriterion">
            <summary>
            Gets or sets the tuning criterion. A MIP model can often be too hard to solve. Different users may have different criteria, some want smaller MIPGap, while others want better incumbent solutions. This parameter allows you to specify different tuning citerions, 0 for runtime, 1 for MIPGap, 2 for objective value. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TuneJobs">
            <summary>
            Gets or sets the number of jobs for distributed parallel tuning. A value of 'n' causes the tuning tool to distribute tuning work among 'n' parallel jobs. Jobs are distributed among a set of distributed worker machines. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TuneOutput">
            <summary>
            Gets or sets the amount of output produced by the tuning tool. Level 0 produces no output; level 1 produces tuning summary output only when a new best parameter set is found; level 2 produces tuning summary output for each parameter set that is tried; level 3 produces tuning summary output, plus detailed solver output, for each parameter set tried.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TuneResults">
            <summary>
            Gets or sets the number of tuning results. The tuning tool often finds multiple parameter sets that produce better results than the baseline settings. This parameter controls how many of these sets should be retained when tuning is complete.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TuneTrials">
            <summary>
            Gets or sets the number of tuning trials. Performance on a MIP model can sometimes experience significant variations due to random effects. As a result, the tuning tool may return parameter sets that improve on the baseline only due to randomness. This parameter allows you to perform multiple solves for each parameter set, using different random number seeds for each, in order to reduce the influence of randomness on the results.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.UpdateMode">
            <summary>
            Gets or sets the way how to update a model. Value 1 is default and allows adding both new variables and new constraints before calling update, while value 0 doesn't allow. In most cases, value 0 and value 1 will have the same behavior for updating a model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.VarBranch">
            <summary>
            Gets or sets the branch variable selection strategy.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ZeroHalfCuts">
            <summary>
            Gets or sets the zero-half cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ZeroObjNodes">
            <summary>
            Gets or sets the number of nodes to explore in the Zero Objective heuristic. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSAuthToken">
            <summary>
            Gets or sets the when a client authenticates with a Cluster Manager using a username and password, a signed token is returned by the server to be used in further calls or command-line operations. It is used internally.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSAPIAccessID">
            <summary>
            Gets or sets the access ID for Gurobi Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSAPIACCESSID=YOUR_API_ID) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSAPISecret">
            <summary>
            Gets or sets the secret key for Gurobi Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSAPISECRET=YOUR_API_SECRET_KEY) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSAppName">
            <summary>
            Gets or sets the application name which will be sent to the server to track which application is submitting the batches or jobs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CloudAccessID">
            <summary>
            Gets or sets the access ID for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CloudSecretKey">
            <summary>
            Gets or sets the secret Key for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CloudHost">
            <summary>
            Gets or sets the host for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CloudPool">
            <summary>
            Gets or sets the cloud pool to use for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ComputeServer">
            <summary>
            Gets or sets the name of a node in the Remote Services cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ServerPassword">
            <summary>
            Gets or sets the client password for Remote Services cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSRouter">
            <summary>
            Gets or sets the router node for Remote Services cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSGroup">
            <summary>
            Gets or sets the group placement request for cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.JobID">
            <summary>
            Gets or sets the job ID for Compute Server job.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.LogFile">
            <summary>
            Gets or sets the name of the Gurobi log file.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.CSManager">
            <summary>
            Gets or sets the url of the Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSMANAGER=YOUR_MANAGER_URL) or empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.NodefileDir">
            <summary>
            Gets or sets the directory in which MIP node files are stored.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ResultFile">
            <summary>
            Gets or sets the result file to write when optimization is complete.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.SolFiles">
            <summary>
            Gets or sets the location to store intermediate solution files.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.TokenServer">
            <summary>
            Gets or sets the name of token server.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.UserName">
            <summary>
            Gets or sets the user Name for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.WorkerPassword">
            <summary>
            Gets or sets the password for the distributed workers. When using a distributed parallel algorithm (distributed MIP, distributed concurrent, or distributed tuning), this parameter is used to provide the password for the distributed workers that will be used. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.WorkerPool">
            <summary>
            Gets or sets the cluster that will provide the distributed workers. When using a distributed parallel algorithm (distributed MIP, distributed concurrent, or distributed tuning), use this parameter to provide a comma-separated list of machines, each of which should be a member of a Remote Services cluster. The password for these workers should be provided via the WorkerPassword parameter. Use the ConcurrentJobs or TuneJobs parameters to indicate how many total jobs should be launched on these workers.
            </summary>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor">
            <summary>
            Create a Gurobi environment (with no log file).
            </summary>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor(System.Boolean)">
            <summary>
            Create an empty Gurobi environment
            </summary>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor(System.String)">
            <summary>
            Create a Gurobi environment (with logging enabled).
            </summary>
            <param name="logfilename">The desired log file name.</param>
            <remarks>
            If <paramref name="logfilename"/> is <c>null</c>, no log file will be
            written for the environment.
            </remarks>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Double)">
            <summary>
            Create a client Gurobi environment on a compute server.
            </summary>
            <param name="logfilename">
            The name of the log file for this environment.
            Pass an empty string for no log file.
            </param>
            <param name="computeserver">
            A comma-separated list of Gurobi compute servers. You can refer to
            compute server machines using their names or their IP addresses.
            </param>
            <param name="router">
            The router for a Compute Server cluster.  A router
            can be used to improve the robustness of a Compute Server deployment.
            You should refer to the router using either its name or its IP
            address.  If no router is used, pass an empty string.
            </param>
            <param name="password">
            The password for gaining access to the specified compute servers.
            Pass an empty string if no password is required.
            </param>
            <param name="group">
            The name of the Compute Server group.
            </param>
            <param name="CStlsInsecure">
            Indicates whether to use insecure mode in
            the TLS (Transport Layer Security).
            </param>
            <param name="priority">The priority of the job. Priorities must be
            between -100 and 100, with a default value of 0 (by convention).
            </param>
            <param name="timeout"> Job timeout (in seconds). If the job doesn't
            reach the front of the queue before the specified timeout, the
            constructor will throw a JOB_REJECTED exception. Use a negative
            value to indicate that the call should never timeout.
            </param>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Create a Gurobi environment on Gurobi Instant Cloud.
            </summary>
            <param name="logfilename">
            The name of the log file for this environment.
            Pass an empty string for no log file.
            </param>
            <param name="accessID">
            The access ID for your Gurobi Instant Cloud license.
            This can be retrieved from the Gurobi Instant Cloud website.  When
            used in combination with your secretKey, this allows you
            to launch Instant Cloud instances and submit jobs to them.
            </param>
            <param name="secretKey">
            The secret key for your Gurobi Instant Cloud license.
            This can be retrieved from the Gurobi Instant Cloud website.  When
            used in combination with your access ID, this allows you
            to launch Instant Cloud instances and submit jobs to them.
            </param>
            <param name="pool">
            The machine pool.  Machine pools allow you to create
            fixed configurations on the Instant Cloud website (capturing things
            like size of machine, geographic zone, etc.), and then launch and
            share machines from client programs without having to restate the
            configuration information each time you launch a machine.  If no
            pool name is provided, your job will be launched in the default pool
            associated with your cloud license.
            </param>
            <param name="priority">The priority of the job. Priorities must be
            between -100 and 100, with a default value of 0 (by convention).
            </param>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBEnv.#ctor(System.IntPtr)">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBEnv.Start">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBEnv.Finalize">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBEnv.Message(System.String)">
            <summary>
            Print a message to the console and to the log file.
            </summary>
            <remarks>
            Note that this call has no effect if the
            <see cref="F:Gurobi.GRB.IntParam.OutputFlag"/> parameter is set to zero.
            </remarks>
            <param name="msg">Message to be printed.</param>
        </member>
        <member name="M:Gurobi.GRBEnv.Get(Gurobi.GRB.IntParam)">
            <summary>
            Retrieve the value of an integer-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.IntParam"/> parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBEnv.Get(Gurobi.GRB.DoubleParam)">
            <summary>
            Retrieve the value of a double-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.DoubleParam"/> parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBEnv.Get(Gurobi.GRB.StringParam)">
            <summary>
            Retrieve the value of a string-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.StringParam"/> parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBEnv.Set(Gurobi.GRB.IntParam,System.Int32)">
            <summary>
            Modify the value of an int-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.IntParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBEnv.Set(Gurobi.GRB.DoubleParam,System.Double)">
            <summary>
            Modify the value of a double-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.DoubleParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBEnv.Set(Gurobi.GRB.StringParam,System.String)">
            <summary>
            Modify the value of a string-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.StringParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBEnv.Set(System.String,System.String)">
            <summary>
            Modify the value of a parameter.
            </summary>
            <param name="param">The name of the parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBEnv.GetParamInfo(Gurobi.GRB.IntParam,System.Int32[])">
            <summary>
            Return detailed information about an int-valued parameter.
            </summary>
            <param name="param">The parameter of interest.</param>
            <param name="info">
            The returned information. The current value is returned in info[0],
            the minimum allowed value in info[1], the maximum allowed value in
            info[2], and the default value in info[3].
            </param>
        </member>
        <member name="M:Gurobi.GRBEnv.GetParamInfo(Gurobi.GRB.DoubleParam,System.Double[])">
            <summary>
            Return detailed information about a double-valued parameter.
            </summary>
            <param name="param">The parameter of interest.</param>
            <param name="info">
            The returned information. The current value is returned in info[0],
            the minimum allowed value in info[1], the maximum allowed value in
            info[2], and the default value in info[3].
            </param>
        </member>
        <member name="M:Gurobi.GRBEnv.GetParamInfo(Gurobi.GRB.StringParam,System.String[])">
            <summary>
            Return detailed information about a string-valued parameter.
            </summary>
            <param name="param">The parameter of interest.</param>
            <param name="info">
            The returned information. The current value is returned in info[0],
            and the default value in info[1].
            </param>
        </member>
        <member name="M:Gurobi.GRBEnv.ResetParams">
            <summary>
            Reset all parameters to their default values.
            </summary>
        </member>
        <member name="M:Gurobi.GRBEnv.WriteParams(System.String)">
            <summary>
            Write all non-default parameter settings to the specified file.
            </summary>
        </member>
        <member name="M:Gurobi.GRBEnv.ReadParams(System.String)">
            <summary>
            Read new parameter settings from the specified file.
            </summary>
            <param name="paramfile">Name of the file containing parameter settings</param>
            <remarks>
            Parameters should be listed one per line, with the parameter name first
            and the desired value second. For example:
            <example>
            <code>
            # Gurobi parameter file
            Threads 1
            MIPGap 0
            </code>
            </example>
            Blank lines and lines that begin with the hash symbol are ignored.
            </remarks>
        </member>
        <member name="M:Gurobi.GRBEnv.Dispose">
            <summary>
            Release the resources associated with this environment.
            </summary>
        </member>
        <member name="M:Gurobi.GRBEnv.Release">
            <summary>
            Release the Gurobi license associated with this environment.
            </summary>
        </member>
        <member name="P:Gurobi.GRBEnv.ErrorMsg">
            <summary>
            Get the error message for the current exception.
            </summary>
        </member>
        <member name="T:Gurobi.GRBException">
            <summary>
            Gurobi exception object. This is a sub-class of the .NET
            <see cref="T:System.Exception"/> class. A number of useful properties, including
            <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.StackTrace"/>,
            are inherited from the parent class.
            </summary>
        </member>
        <member name="M:Gurobi.GRBException.#ctor">
            <summary>
            Create a Gurobi exception.
            </summary>
        </member>
        <member name="M:Gurobi.GRBException.#ctor(System.Int32)">
            <summary>
            Create a Gurobi exception.
            </summary>
            <param name="errcode">Error code for exception.</param>
        </member>
        <member name="M:Gurobi.GRBException.#ctor(System.String)">
            <summary>
            Create a Gurobi exception.
            </summary>
            <param name="errmsg">Error message for exception.</param>
        </member>
        <member name="M:Gurobi.GRBException.#ctor(System.String,System.Int32)">
            <summary>
            Create a Gurobi exception.
            </summary>
            <param name="errmsg">Error message for exception.</param>
            <param name="errcode">Error code for exception.</param>
        </member>
        <member name="P:Gurobi.GRBException.ErrorCode">
            <summary>
            Get the error code for this exception.
            </summary>
        </member>
        <member name="T:Gurobi.GRBExpr">
            <summary>
            Gurobi abstract expression class. Please use <see cref="T:Gurobi.GRBLinExpr"/>
            for linear expressions and <see cref="T:Gurobi.GRBQuadExpr"/> for quadratic
            expressions.
            </summary>
        </member>
        <member name="T:Gurobi.GRBGenConstr">
            <summary>Gurobi general constraint class.
            General constraints are always associated with a particular model. You create a
            general constraint object by adding a general constraint to a model (using
            one of the GRBModel.AddGenConstrXxx methods), rather than by using a
            GRBGenConstr constructor.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.GenConstrName">
            <summary>
            Gets or sets the general constraint name.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.GenConstrType">
            <summary>
            Gets the general constraint type.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.IISGenConstr">
            <summary>
            Gets a value indicating whether the general constraint participates in the IIS.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.FuncPieceError">
            <summary>
            Gets or sets the error allowed for PWL translation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.FuncPieceLength">
            <summary>
            Gets or sets the piece length for PWL translation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.FuncPieceRatio">
            <summary>
            Gets or sets a value indicating whether to link function values or to have pieces below or above the function.
            </summary>
        </member>
        <member name="P:Gurobi.GRBGenConstr.FuncPieces">
            <summary>
            Gets or sets the control PWL translation whether to use equal piece length, to limit error or to limit the total number of pieces.
            </summary>
        </member>
        <member name="M:Gurobi.GRBGenConstr.#ctor">
            <summary>Create empty general constraint.</summary>
        </member>
        <member name="M:Gurobi.GRBGenConstr.Get(Gurobi.GRB.StringAttr)">
            <summary>
            Query the value of a string-valued general constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBGenConstr.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Retrieve the value of an integer-valued general constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBGenConstr.Get(Gurobi.GRB.DoubleAttr)">
            <summary>
            Retrieve the value of a double-valued general constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBGenConstr.Set(Gurobi.GRB.StringAttr,System.String)">
            <summary>
            Modify the value of a string-valued general constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBGenConstr.Set(Gurobi.GRB.IntAttr,System.Int32)">
            <summary>
            Modify the value of an integer-valued general constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBGenConstr.Set(Gurobi.GRB.DoubleAttr,System.Double)">
            <summary>
            Modify the value of a double-valued general constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="T:Gurobi.GRBLinExpr">
            <summary>
            Gurobi linear expression class.  A linear expression consists of a
            constants term, plus a list of coefficient-variable pairs that capture
            the linear terms.  Linear expressions are used to build constraints.
            They are temporary objects that typically have short lifespans.
            </summary>
        </member>
        <member name="M:Gurobi.GRBLinExpr.#ctor">
            <summary>
            Create an empty linear expression.
            </summary>
        </member>
        <member name="M:Gurobi.GRBLinExpr.#ctor(System.Double)">
            <summary>
            Create a constant linear expression.
            </summary>
            <param name="a">Constant value for expression.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.#ctor(Gurobi.GRBVar,System.Double)">
            <summary>
            Create a linear expression with one term.
            </summary>
            <param name="x">Variable for expression term.</param>
            <param name="a">Coefficient for expression term.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.#ctor(Gurobi.GRBLinExpr)">
            <summary>
            Copy an existing linear expression.
            </summary>
            <param name="linexpr">Existing expression to copy.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Implicit(System.Double)~Gurobi.GRBLinExpr">
            <summary>
            Create a constant linear expression from a constant value.
            </summary>
            <param name="value">Constant value.</param>
            <returns>A new constant linear expression.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Implicit(Gurobi.GRBVar)~Gurobi.GRBLinExpr">
            <summary>
            Create a linear expression from a single variable.
            </summary>
            <param name="var">Variable for expression term.</param>
            <returns>A new linear expression with one variable.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Addition(Gurobi.GRBLinExpr,Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by adding a linear expression
            and a variable.
            </summary>
            <param name="expr">Linear expression.</param>
            <param name="var">Variable to add.</param>
            <returns>
            A new linear expression that is equal to the sum of the
            argument linear expression and the argument variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Addition(Gurobi.GRBVar,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear expression by adding a variable and a
            linear expression.
            </summary>
            <param name="var">Variable to add.</param>
            <param name="expr">Linear expression.</param>
            <returns>
            A new linear expression that is equal to the sum of the
            argument variable and the argument linear expression.
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Addition(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear expression by adding a pair of linear expressions.
            </summary>
            <param name="expr1">First linear expression.</param>
            <param name="expr2">Second linear expression.</param>
            <returns>
            A new linear expression that is equal to the sum of the two
            argument expressions.
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Subtraction(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear expression by subtracting a pair of
            linear expressions.
            </summary>
            <param name="expr1">First linear expression.</param>
            <param name="expr2">Second linear expression.</param>
            <returns>
            A new linear expression that is equal to the first expression minus the second.
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_UnaryNegation(Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear expression by multiplying a linear expression by -1.
            </summary>
            <param name="expr">Linear expression.</param>
            <returns>A new linear expression that is equal to the product of the
            linear expression argument and -1.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Multiply(System.Double,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear expression by multiplying a constant value
            with a linear expression.
            </summary>
            <param name="mult">Constant value.</param>
            <param name="expr">Linear expression.</param>
            <returns>A new linear expression that is equal to the input expression
            times the input multiplier.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Multiply(Gurobi.GRBLinExpr,System.Double)">
            <summary>
            Create a new linear expression by multiplying a linear expression
            with a constant value.
            </summary>
            <param name="expr">Linear expression.</param>
            <param name="mult">Constant value.</param>
            <returns>A new linear expression that is equal to the input expression
            times the input multiplier.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Multiply(Gurobi.GRBLinExpr,Gurobi.GRBVar)">
            <summary>
            Create a new quadratic expression by multiplying a linear
            expression with a variable.
            </summary>
            <param name="le">Linear expression.</param>
            <param name="var">Variable.</param>
            <returns>
            A new quadratic expression that is equal the the product of
            the input expression and the input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Multiply(Gurobi.GRBVar,Gurobi.GRBLinExpr)">
            <summary>
            Create a new quadratic expression by multiplying a variable
            with a linear expression.
            </summary>
            <param name="var">Variable.</param>
            <param name="le">Linear expression.</param>
            <returns>
            A new quadratic expression that is equal the the product of
            the input expression and the input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Multiply(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>
            Create a new quadratic expression by multiplying a pair
            of linear expressions.
            </summary>
            <param name="x">First linear expression.</param>
            <param name="y">Second linear expression.</param>
            <returns>
            A new quadratic expression that is equal to the product of
            the two argument expressions.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_LessThanOrEqual(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear inequality constraint.
            </summary>
            <param name="lhs">Left-hand side of inequality constraint.</param>
            <param name="rhs">Right-hand side of inequality constraint.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_GreaterThanOrEqual(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear inequality constraint.
            </summary>
            <param name="lhs">Left-hand side of inequality constraint.</param>
            <param name="rhs">Right-hand side of inequality constraint.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Equality(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>
            Create a new linear equality constraint.
            </summary>
            <param name="lhs">Left-hand side of equality constraint.</param>
            <param name="rhs">Right-hand side of equality constraint.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>
            </returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.op_Inequality(Gurobi.GRBLinExpr,Gurobi.GRBLinExpr)">
            <summary>Invalid operator. Do not use.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="P:Gurobi.GRBLinExpr.Size">
            <summary>
            Return the number of terms in the expression (not including the
            constant).
            </summary>
        </member>
        <member name="M:Gurobi.GRBLinExpr.GetVar(System.Int32)">
            <summary>
            Retrieve the variable for term <paramref name="i"/> in the expression.
            </summary>
            <param name="i">Term index. Must be less than <see cref="P:Gurobi.GRBLinExpr.Size"/></param>
            <returns>Variable of the term at index <paramref name="i"/> in the expression.</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.GetCoeff(System.Int32)">
            <summary>
            Retrieve the coefficient for term <paramref name="i"/> in the expression.
            </summary>
            <param name="i">Term index. Must be less than <see cref="P:Gurobi.GRBLinExpr.Size"/></param>
            <returns>Coefficient of the term at index <paramref name="i"/> in the expression.</returns>
        </member>
        <member name="P:Gurobi.GRBLinExpr.Constant">
            <summary>
            Retrieve the constant term from the linear expression.
            </summary>
        </member>
        <member name="P:Gurobi.GRBLinExpr.Value">
            <summary>
            Compute the value of the linear expression for the current solution.
            </summary>
        </member>
        <member name="M:Gurobi.GRBLinExpr.AddConstant(System.Double)">
            <summary>
            Add a constant into the expression.
            </summary>
            <param name="c">Constant to add to expression.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.AddTerm(System.Double,Gurobi.GRBVar)">
            <summary>
            Add a single term into the expression.
            </summary>
            <param name="coeff">Coefficient for new term.</param>
            <param name="var">Variable for new term.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.AddTerms(System.Double[],Gurobi.GRBVar[])">
            <summary>
            Add a list of terms into the linear expression.
            </summary>
            <remarks>
            The lengths of the two argument arrays must be equal.
            </remarks>
            <param name="coeff">Coefficients for new terms.</param>
            <param name="var">Variables for new terms.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.AddTerms(System.Double[],Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Add a list of terms into the linear expression.
            </summary>
            <remarks>
            The lengths of the two argument arrays must be equal.
            </remarks>
            <param name="coeff">Coefficients for new terms.</param>
            <param name="var">Variables for new terms.</param>
            <param name="start">The index of the first term in the array to add.</param>
            <param name="len">The number of terms to add.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.Add(Gurobi.GRBLinExpr)">
            <summary>
            Add another expression into the expression.
            </summary>
            <remarks>
            Upon completion, the invoking linear expression will be
            equal to the sum of itself and the argument expression.
            </remarks>
            <param name="le">Linear expression to add.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.MultAdd(System.Double,Gurobi.GRBLinExpr)">
            <summary>
            Add a linear multiple of an expression into the expression.
            </summary>
            <remarks>
            Upon completion, the invoking linear expression is equal the sum of
            itself and the constant times the argument expression.
            </remarks>
            <param name="m">Constant multiplier for added expression.</param>
            <param name="le">Linear expression to add.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.Remove(System.Int32)">
            <summary>
            Remove term <paramref name="i"/> from the expression.
            </summary>
            <param name="i">The index of the linear term to be removed.</param>
        </member>
        <member name="M:Gurobi.GRBLinExpr.Remove(Gurobi.GRBVar)">
            <summary>
            Remove all terms associated with variable <paramref name="v"/> from the expression.
            </summary>
            <param name="v">The variable whose term should be removed.</param>
            <returns><c>true</c> if the variable appeared in the linear expression (and was removed).</returns>
        </member>
        <member name="M:Gurobi.GRBLinExpr.Clear">
            <summary>
            Set the expression to 0. You should use the overloaded <c>expression = 0</c> instead.
            </summary>
        </member>
        <member name="T:Gurobi.GRBModel">
            <summary>
            Gurobi model object. A model captures all the constraints and
            variables associated with one optimization problem.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BarIterCount">
            <summary>
            Gets the number of barrier iterations performed in most recent optimization.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.FarkasProof">
            <summary>
            Gets the magnitude of infeasibility violation in Farkas infeasibility proof.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IISMinimal">
            <summary>
            Gets a value indicating whether the current IIS is minimal.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IsMIP">
            <summary>
            Gets a value indicating whether the model is a MIP.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IsQCP">
            <summary>
            Gets a value indicating whether the model is a QCP/MIQCP.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IsQP">
            <summary>
            Gets a value indicating whether the model is a QP/MIQP.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IsMultiObj">
            <summary>
            Gets a value indicating whether the model has multiple objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IterCount">
            <summary>
            Gets the number of simplex iterations performed in most recent optimization.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.JobID">
            <summary>
            Gets the job ID for Compute Server job.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.Kappa">
            <summary>
            Gets the estimated basis condition number.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.KappaExact">
            <summary>
            Gets the exact basis condition number.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MIPGap">
            <summary>
            Gets the current relative MIP optimality gap.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxBound">
            <summary>
            Gets the maximum finite variable bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxCoeff">
            <summary>
            Gets the maximum constraint matrix coefficient (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxObjCoeff">
            <summary>
            Gets the maximum linear objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxQCCoeff">
            <summary>
            Gets the maximum quadratic constraint coefficient in quadratic part (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxQCLCoeff">
            <summary>
            Gets the maximum quadratic constraint coefficient in linear part (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxQObjCoeff">
            <summary>
            Gets the maximum quadratic objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxRHS">
            <summary>
            Gets the maximum linear constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MaxQCRHS">
            <summary>
            Gets the maximum quadratic constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinBound">
            <summary>
            Gets the minimum finite variable bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinCoeff">
            <summary>
            Gets the minimum (non-zero) constraint matrix coefficient (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinObjCoeff">
            <summary>
            Gets the minimum (non-zero) linear objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinQCCoeff">
            <summary>
            Gets the minimum (non-zero) quadratic constraint coefficient in quadratic part (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinQCLCoeff">
            <summary>
            Gets the minimum (non-zero) quadratic constraint coefficient in linear part (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinQObjCoeff">
            <summary>
            Gets the minimum (non-zero) quadratic objective coefficient (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinRHS">
            <summary>
            Gets the minimum (non-zero) linear constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.MinQCRHS">
            <summary>
            Gets the minimum (non-zero) quadratic constraint right-hand side (in absolute value).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ModelName">
            <summary>
            Gets or sets the model name.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ModelSense">
            <summary>
            Gets or sets the optimization sense (+1 for minimize, -1 for maximize).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NodeCount">
            <summary>
            Gets the number of branch-and-cut nodes explored in most recent optimization.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumBinVars">
            <summary>
            Gets the number of binary variables in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumConstrs">
            <summary>
            Gets the number of linear constraints in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumGenConstrs">
            <summary>
            Gets the number of general constraints in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumIntVars">
            <summary>
            Gets the number of integer variables in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumNZs">
            <summary>
            Gets the number of non-zero coefficients in the constraint matrix.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumObj">
            <summary>
            Gets or sets the number of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumPWLObjVars">
            <summary>
            Gets the number of variables with piecewise-linear objective functions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumQCNZs">
            <summary>
            Gets the number of non-zero coefficients in the quadratic constraints (includes both the linear and quadratic terms).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumQConstrs">
            <summary>
            Gets the number of quadratic constraints in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumQNZs">
            <summary>
            Gets the number of non-zero coefficients in the quadratic objective.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumScenarios">
            <summary>
            Gets or sets the number of scenarios in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumSOS">
            <summary>
            Gets the number of SOS constraints in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumStart">
            <summary>
            Gets or sets the number of MIP starts.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.NumVars">
            <summary>
            Gets the number of variables in the model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjBound">
            <summary>
            Gets the best available objective bound (lower bound for minimization, upper bound for maximization).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjBoundC">
            <summary>
            Gets the best available objective bound, without rounding (lower bound for minimization, upper bound for maximization.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjCon">
            <summary>
            Gets or sets the constant offset of the objective function.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNAbsTol">
            <summary>
            Gets or sets the absolute tolerances of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNCon">
            <summary>
            Gets or sets the constant terms of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNName">
            <summary>
            Gets or sets the names of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNPriority">
            <summary>
            Gets or sets the priorities of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNRelTol">
            <summary>
            Gets or sets the relative tolerances of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNWeight">
            <summary>
            Gets or sets the weights of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjNVal">
            <summary>
            Gets or sets the objective value for multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ObjVal">
            <summary>
            Gets the objective value of the current solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.PoolObjBound">
            <summary>
            Gets the bound on the best objective for an as-yet undiscovered solution (lower bound for minimization, upper bound for maximization).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.PoolObjVal">
            <summary>
            Gets the objective value of stored alternate MIP solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.Runtime">
            <summary>
            Gets the runtime of the most recent optimization.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ScenNName">
            <summary>
            Gets or sets the name of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ScenNObjBound">
            <summary>
            Gets the objective bound of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ScenNObjVal">
            <summary>
            Gets the objective value of current solution of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.SolCount">
            <summary>
            Gets the number of stored solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.Server">
            <summary>
            Gets the name of server for Compute Server job.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.Status">
            <summary>
            Gets the current optimization status of the model (see <see cref="T:Gurobi.GRB.Status" />).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.TuneResultCount">
            <summary>
            Gets the number of improved parameter sets found by the tuning tool.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.LicenseExpiration">
            <summary>
            Gets or sets the license expiration date.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BoundSVio">
            <summary>
            Gets the maximum (scaled) bound violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BoundSVioIndex">
            <summary>
            Gets the index of the variable with the largest (scaled) bound violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BoundSVioSum">
            <summary>
            Gets the sum of (scaled) bound violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BoundVio">
            <summary>
            Gets the maximum (unscaled) bound violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BoundVioIndex">
            <summary>
            Gets the index of the variable with the largest (unscaled) bound violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.BoundVioSum">
            <summary>
            Gets the sum of (unscaled) bound violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ComplVio">
            <summary>
            Gets the maximum complementarity violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ComplVioIndex">
            <summary>
            Gets the index of the variable with the largest complementarity violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ComplVioSum">
            <summary>
            Gets the sum of complementarity violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrResidual">
            <summary>
            Gets the maximum (unscaled) primal constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrResidualIndex">
            <summary>
            Gets the index of the constraint with the largest (unscaled) primal constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrResidualSum">
            <summary>
            Gets the sum of (unscaled) primal constraint errors.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrSResidual">
            <summary>
            Gets the maximum (scaled) primal constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrSResidualIndex">
            <summary>
            Gets the index of the constraint with the largest (scaled) primal constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrSResidualSum">
            <summary>
            Gets the sum of (scaled) primal constraint errors.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrSVio">
            <summary>
            Gets the maximum (scaled) constraint violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrSVioIndex">
            <summary>
            Gets the index of the constraint with the largest (scaled) violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrSVioSum">
            <summary>
            Gets the sum of (scaled) constraint violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrVio">
            <summary>
            Gets the maximum (unscaled) constraint violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrVioIndex">
            <summary>
            Gets the index of the constraint with the largest (unscaled) violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.ConstrVioSum">
            <summary>
            Gets the sum of (unscaled) constraint violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualResidual">
            <summary>
            Gets the maximum (unscaled) dual constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualResidualIndex">
            <summary>
            Gets the index of the variable with the largest (unscaled) dual constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualResidualSum">
            <summary>
            Gets the sum of (unscaled) dual constraint errors.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualSResidual">
            <summary>
            Gets the maximum (scaled) dual constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualSResidualIndex">
            <summary>
            Gets the index of the variable with the largest (scaled) dual constraint error.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualSResidualSum">
            <summary>
            Gets the sum of (scaled) dual constraint errors.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualSVio">
            <summary>
            Gets the maximum (scaled) reduced cost violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualSVioIndex">
            <summary>
            Gets the index of the variable with the largest (scaled) reduced cost violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualSVioSum">
            <summary>
            Gets the sum of (scaled) reduced cost violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualVio">
            <summary>
            Gets the maximum (unscaled) reduced cost violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualVioIndex">
            <summary>
            Gets the index of the variable with the largest (unscaled) reduced cost violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.DualVioSum">
            <summary>
            Gets the sum of (unscaled) reduced cost violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IntVio">
            <summary>
            Gets the maximum integrality violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IntVioIndex">
            <summary>
            Gets the index of the variable with the largest integrality violation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.IntVioSum">
            <summary>
            Gets the sum of integrality violations.
            </summary>
        </member>
        <member name="T:Gurobi.GRBModel.EnvParameters">
            <summary>
            Class that encapsules all parameters of a Gurobi environment.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BarConvTol">
            <summary>
            Gets or sets the convergence tolerance for barrier solver. Optimization terminates when the relative difference between the primal and dual objective is less than this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BarQCPConvTol">
            <summary>
            Gets or sets the convergence tolerance for barrier solver when solving a QCP model. Optimization terminates when the relative difference between the primal and dual objective is less than this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BestBdStop">
            <summary>
            Gets or sets the best bound objective threshold.  Optimization stops when the best bound is at least as good as the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BestObjStop">
            <summary>
            Gets or sets the feasible solution objective threshold.  Optimization stops when the best feasible solution objective is at least as good as the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Cutoff">
            <summary>
            Gets or sets the target solution objective value. The Gurobi solver will only attempt to find solutions whose objective values are better than the specified target.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FeasRelaxBigM">
            <summary>
            Gets or sets the feasrelax BigM for the cardinality type.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FeasibilityTol">
            <summary>
            Gets or sets the primal feasibility tolerance. All constraints must be satisfied to this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FuncPieceError">
            <summary>
            Gets or sets the error allowed for PWL translation of general function constraints without own options specified.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FuncPieceLength">
            <summary>
            Gets or sets the piece length for PWL translation of general function constraints without own options specified.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FuncPieceRatio">
            <summary>
            Gets or sets a value indicating whether to link function values or to have pieces below or above the function.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FuncMaxVal">
            <summary>
            Gets or sets the maximal value for |lb| and |ub| of x and y variables of general function constraints.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Heuristics">
            <summary>
            Gets or sets the fraction of runtime spent in MIP heuristics. Larger values produce more and better feasible solutions, at a cost of slower progress in the best bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ImproveStartGap">
            <summary>
            Gets or sets the optimality gap at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ImproveStartNodes">
            <summary>
            Gets or sets the explored node count at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ImproveStartTime">
            <summary>
            Gets or sets the elapsed solver runtime at which the MIP solve will switch to a strategy that gives up on moving the best bound and instead devotes all of its effort towards finding better feasible solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.IntFeasTol">
            <summary>
            Gets or sets the integer feasibility tolerance. Integer variables must take values that are no more than the specified tolerance away from the nearest integer.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.IterationLimit">
            <summary>
            Gets or sets the limit on the number of simplex iterations that will be performed. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MIPGap">
            <summary>
            Gets or sets the mip optimality tolerance. Solution is declared optimal when the relative difference between the lower and upper bound is below the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MIPGapAbs">
            <summary>
            Gets or sets the mip optimality tolerance. Solution is declared optimal when the absolute different between the lower and upper bound is below the specified value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MarkowitzTol">
            <summary>
            Gets or sets the threshold pivoting tolerance. Used to limit numerical error in the simplex algorithm. A larger value may avoid numerical problems in rare situations, but it will harm performance for most models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NodeLimit">
            <summary>
            Gets or sets the limit on the number of branch-and-bound nodes that will be explored. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NodefileStart">
            <summary>
            Gets or sets the amount of storage the MIP nodes can consume (in GB) before nodes are written to disk.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ObjScale">
            <summary>
            Gets or sets the simplex objective scaling. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.OptimalityTol">
            <summary>
            Gets or sets the dual feasibility tolerance. All dual constraints must be satisfied to this tolerance.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PSDTol">
            <summary>
            Gets or sets the qp positive semi-definite tolerance. Sets a limit on the amount of diagonal perturbation that the optimizer is allowed to perform on the Q matrix in order to correct minor PSD violations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PerturbValue">
            <summary>
            Gets or sets the magnitude of the simplex perturbation (when perturbation is required).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PoolGap">
            <summary>
            Gets or sets the maximum optimality gap for stored solutions.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreSOS1BigM">
            <summary>
            Gets or sets the largest big-M value presolve is allowed to use when converting an SOS-1 constraint into binary form.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreSOS2BigM">
            <summary>
            Gets or sets the largest big-M value presolve is allowed to use when converting an SOS-2 constraint into binary form.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TimeLimit">
            <summary>
            Gets or sets the limit on the amount of time that will be used for an optimization. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TuneTimeLimit">
            <summary>
            Gets or sets the limit on the amount of time that will be used for the tuning tool (in seconds).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSQueueTimeout">
            <summary>
            Gets or sets the queue timeout for new jobs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.AggFill">
            <summary>
            Gets or sets the presolve aggregation fill level. This is the amount of constraint matrix fill to allow in a single aggregation step.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Aggregate">
            <summary>
            Gets or sets a value indicating whether aggregation is enabled or disabled in presolve. In rare instances, aggregation can lead to an accumulation of numerical errors. Turning it off can sometimes improve solution accuracy.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BarCorrectors">
            <summary>
            Gets or sets the number of central corrections applied during the barrier solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BarHomogeneous">
            <summary>
            Gets or sets a value indicating whether the homogeneous algorithm is used when solving a model using barrier.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BarIterLimit">
            <summary>
            Gets or sets the limit on the number of barrier iterations that will be performed. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BarOrder">
            <summary>
            Gets or sets the barrier ordering strategy. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BranchDir">
            <summary>
            Gets or sets the branch direction. Modify the order in which MIP nodes are explored in the branch-and-cut search. After processing a node, the default setting chooses the more promising child node to explore next. A setting of -1 will always explore the down branch first, while a setting of 1 will always explore the up branch first.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CliqueCuts">
            <summary>
            Gets or sets the clique cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ConcurrentJobs">
            <summary>
            Gets or sets the number of concurrent jobs for the distributed concurrent optimizer. A value of 'n' causes the concurrent optimizer to create 'n' independent models, using different parameter settings for each. Each of these models is sent to a distributed worker machine for processing. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers. The optimization terminates when the first model solves.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ConcurrentMIP">
            <summary>
            Gets or sets the number of concurrent MIP jobs. A value of 'n' causes the MIP solver to solve 'n' independent MIP models, using different parameter settings for each. The optimization terminates when the the first model solves.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CoverCuts">
            <summary>
            Gets or sets the cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Crossover">
            <summary>
            Gets or sets the type of crossover performed after barrier. By default, the algorithm choose automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CrossoverBasis">
            <summary>
            Gets or sets the type of initial crossover basis construction. The default value of 0 builds a basis quickly. Choose value 1 for a more expensive basis that is often more numerically stable.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSBatchMode">
            <summary>
            Gets or sets the when set to 1, enable the local creation of models, and later submit batch-optimization jobs to the Cluster Manager. Note that if CSBatchMode is enabled, only batch-optimization calls are allowed.  You must set this parameter through either a gurobi.lic file (using CSBATCHMODE=1) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSClientLog">
            <summary>
            Gets or sets the turns logging on or off for Compute Server. Options are off (0), only error messages (1), information and error messages (2), or (3) verbose, information, and error messages.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSIdleTimeout">
            <summary>
            Gets or sets the how much idle time before server hangs up.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSPriority">
            <summary>
            Gets or sets the job priority for Compute Server job.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSTLSInsecure">
            <summary>
            Gets or sets the use insecure mode in TLS for Compute Server.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CutAggPasses">
            <summary>
            Gets or sets the maximum number of aggregation passes performed during cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CutPasses">
            <summary>
            Gets or sets the maximum number of cut passes performed during cut generation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Cuts">
            <summary>
            Gets or sets the global cut generation control.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.DegenMoves">
            <summary>
            Gets or sets the limit on degenerate simplex moves. These moves are performed to improve the integrality of the current relaxation solution. By default, the algorithm chooses the number of moves to perform automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Disconnected">
            <summary>
            Gets or sets the disconnected component strategy. A MIP model can sometimes be made up of multiple, completely independent sub-models. This parameter controls how aggressively we try to exploit this structure. A value of 0 ignores this structure entirely, while larger values try more aggressive approaches. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.DisplayInterval">
            <summary>
            Gets or sets the frequency at which log lines are printed (in seconds).
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.DistributedMIPJobs">
            <summary>
            Gets or sets a value indicating whether distributed MIP is used. A value of 'n' causes the MIP solver to divide the work of solving the MIP model among 'n' worker machines. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.DualReductions">
            <summary>
            Gets or sets a value indicating whether dual reductions in MIP are used. Disable dual reductions if you plan to add lazy constraints. Otherwise, incorrect solutions may result.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FlowCoverCuts">
            <summary>
            Gets or sets the flow cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FlowPathCuts">
            <summary>
            Gets or sets the flow path cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.FuncPieces">
            <summary>
            Gets or sets the control PWL translation of general function constraints without own options specified, whether to use equal piece length, to limit error or to limit the total number of pieces.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.GUBCoverCuts">
            <summary>
            Gets or sets the gub cover cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.GomoryPasses">
            <summary>
            Gets or sets the maximum number of Gomory cut passes performed. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.IgnoreNames">
            <summary>
            Gets or sets a value indicating whether to ignore names provided by users.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.IISMethod">
            <summary>
            Gets or sets the method used to compute an Irreducible Infeasible Subsystem. Method 0 is typically much faster, but method 1 can product a much smaller IIS. Method 2 ignores the bound constraints.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ImpliedCuts">
            <summary>
            Gets or sets the implied bound cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.InfProofCuts">
            <summary>
            Gets or sets the infeasibility proof cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.JSONSolDetail">
            <summary>
            Gets or sets the controls amount of information in a JSON solution string.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.RelaxLiftCuts">
            <summary>
            Gets or sets the relax-and-lift cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.RLTCuts">
            <summary>
            Gets or sets the rlt cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.BQPCuts">
            <summary>
            Gets or sets the bqp cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.InfUnbdInfo">
            <summary>
            Gets or sets a value indicating whether additional information should be made available for infeasible or unbounded LP models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.LazyConstraints">
            <summary>
            Gets or sets a value indicating whether lazy constraints are enabled. Programs that add lazy constraints must set this parameter to 1.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.LogToConsole">
            <summary>
            Gets or sets a value indicating whether the Gurobi log should be sent to the console.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MIPFocus">
            <summary>
            Gets or sets the focus of MIP search. Allows you to change the focus to finding feasible solution, proving optimality, or moving the objective bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MIPSepCuts">
            <summary>
            Gets or sets the mip separation cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MIQCPMethod">
            <summary>
            Gets or sets the indicator to solve QCP node relaxation or to use outer approximation.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MIRCuts">
            <summary>
            Gets or sets the mixed Integer Rounding (MIR) cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Method">
            <summary>
            Gets or sets the algorithm used to solve continuous linear models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MinRelNodes">
            <summary>
            Gets or sets the number of nodes to explore in the Minimum Relaxation heuristic. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MultiObjMethod">
            <summary>
            Gets or sets the warm-start method to solve for subsequent objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.MultiObjPre">
            <summary>
            Gets or sets the initial presolve on multi-objective models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ModKCuts">
            <summary>
            Gets or sets the mod-k cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NetworkCuts">
            <summary>
            Gets or sets the network cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NonConvex">
            <summary>
            Gets or sets the controls how to deal with non-convex quadratic programs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NoRelHeuristic">
            <summary>
            Gets or sets a value indicating whether the NoRel heuristic, which searches for feasible solutions to a MIP model before solving the root relaxation, should be used.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NodeMethod">
            <summary>
            Gets or sets the algorithm used to solve the MIP node relaxations.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NormAdjust">
            <summary>
            Gets or sets the pricing norm variant. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NumericFocus">
            <summary>
            Gets or sets the numerical focus. This parameter controls the degree to which the code attempts to detect and manage numerical issues. The default setting (0) makes an automatic choice, with a slight preference for speed.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ObjNumber">
            <summary>
            Gets or sets the selects the objective index of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.OutputFlag">
            <summary>
            Gets or sets a value indicating whether Gurobi output should be enabled/disabled.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PartitionPlace">
            <summary>
            Gets or sets the controls when the partition heuristic runs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PoolSearchMode">
            <summary>
            Gets or sets the approach used to find solutions in the MIP search.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PoolSolutions">
            <summary>
            Gets or sets the number of solutions to store for a MIP model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreCrush">
            <summary>
            Gets or sets a value indicating whether presolve translates constraints on the original model to equivalent constraints on the presolved model. Enable this when you are using callbacks to add your own cuts.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreDepRow">
            <summary>
            Gets or sets a value indicating whether presolve attempts to remove linearly dependent rows from the model. By default, the dependent row reduction is on for continuous models and off for MIP models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreDual">
            <summary>
            Gets or sets the presolve dualization strategy for continuous models. Forming the dual of the input model can sometimes significantly reduce solution times. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreMIQCPForm">
            <summary>
            Gets or sets the format of the presolved MIQCP model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PrePasses">
            <summary>
            Gets or sets the presolve pass limit. Controls the number of passes performed by presolve. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreQLinearize">
            <summary>
            Gets or sets the controls presolve Q matrix linearization. Options 1 and 2 attempt to linearize quadratic constraints or a quadratic objective.  Option 1 focuses on getting a strong LP relaxation. Option 2 aims for a compact relaxation.  Option 0 always leaves Q matrices unmodified.  The default setting (-1) chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PreSparsify">
            <summary>
            Gets or sets the presolve matrix sparsification.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Presolve">
            <summary>
            Gets or sets the presolve level. More aggressive presolve reductions can produce a model that is easier to solve, but such reductions can be expensive.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ProjImpliedCuts">
            <summary>
            Gets or sets the projected implied bound cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.PumpPasses">
            <summary>
            Gets or sets the number of passes of the MIP feasibility pump heuristic performed. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.QCPDual">
            <summary>
            Gets or sets the indicator to compute QCP duals.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Quad">
            <summary>
            Gets or sets the quad precision computation in simplex. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.RINS">
            <summary>
            Gets or sets the frequency at which to apply the RINS heuristic. The default value of -1 is an automatic setting. A value of 0 shuts off the RINS heuristic. Setting the parameter to a positive value 'n' applies the RINS at every n-th node in the MIP search tree.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Record">
            <summary>
            Gets or sets the replay mode, which writes one or more files that capture the sequence of Gurobi commands that your program issues. These files can be replayed later using the Gurobi command-line tool.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ScaleFlag">
            <summary>
            Gets or sets the model scaling.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ScenarioNumber">
            <summary>
            Gets or sets the selects the scenario index of multi-scenario models.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Seed">
            <summary>
            Gets or sets the random number seed.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ServerTimeout">
            <summary>
            Gets or sets the network timeout.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SiftMethod">
            <summary>
            Gets or sets the method to solve sifting subproblem. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Sifting">
            <summary>
            Gets or sets the dual simplex sifting strategy for LP, MIP root and MIP nodes. By default, the algorithm chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SimplexPricing">
            <summary>
            Gets or sets the simplex variable pricing strategy.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SolutionLimit">
            <summary>
            Gets or sets the limit on the number of feasible solutions found by the Gurobi MIP solver. Optimization will terminate when this limit is reached.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SolutionNumber">
            <summary>
            Gets or sets the current solution number. When querying an alternate MIP solution through the Xn, ObjNVal or PoolObjVal attribute, determines which solution is retrieved.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.StartNodeLimit">
            <summary>
            Gets or sets the limit on the number of branch-and-bound nodes explored when completing a partial MIP start.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.StartNumber">
            <summary>
            Gets or sets the selects the MIP start index.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.StrongCGCuts">
            <summary>
            Gets or sets the strong Chvatal Gomory (Strong-CG) cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SubMIPCuts">
            <summary>
            Gets or sets the sub-mip cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SubMIPNodes">
            <summary>
            Gets or sets the limit on the number of nodes explored in local search heuristics.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Symmetry">
            <summary>
            Gets or sets the symmetry detection level. By default, the algorithm choose automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.Threads">
            <summary>
            Gets or sets the parallel Gurobi MIP thread count. The default value of 0 uses all of the processors in the machine.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TSPort">
            <summary>
            Gets or sets the token server port.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TuneCriterion">
            <summary>
            Gets or sets the tuning criterion. A MIP model can often be too hard to solve. Different users may have different criteria, some want smaller MIPGap, while others want better incumbent solutions. This parameter allows you to specify different tuning citerions, 0 for runtime, 1 for MIPGap, 2 for objective value. The default value of -1 chooses automatically.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TuneJobs">
            <summary>
            Gets or sets the number of jobs for distributed parallel tuning. A value of 'n' causes the tuning tool to distribute tuning work among 'n' parallel jobs. Jobs are distributed among a set of distributed worker machines. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TuneOutput">
            <summary>
            Gets or sets the amount of output produced by the tuning tool. Level 0 produces no output; level 1 produces tuning summary output only when a new best parameter set is found; level 2 produces tuning summary output for each parameter set that is tried; level 3 produces tuning summary output, plus detailed solver output, for each parameter set tried.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TuneResults">
            <summary>
            Gets or sets the number of tuning results. The tuning tool often finds multiple parameter sets that produce better results than the baseline settings. This parameter controls how many of these sets should be retained when tuning is complete.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TuneTrials">
            <summary>
            Gets or sets the number of tuning trials. Performance on a MIP model can sometimes experience significant variations due to random effects. As a result, the tuning tool may return parameter sets that improve on the baseline only due to randomness. This parameter allows you to perform multiple solves for each parameter set, using different random number seeds for each, in order to reduce the influence of randomness on the results.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.UpdateMode">
            <summary>
            Gets or sets the way how to update a model. Value 1 is default and allows adding both new variables and new constraints before calling update, while value 0 doesn't allow. In most cases, value 0 and value 1 will have the same behavior for updating a model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.VarBranch">
            <summary>
            Gets or sets the branch variable selection strategy.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ZeroHalfCuts">
            <summary>
            Gets or sets the zero-half cut generation. Overrides the Cuts parameter.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ZeroObjNodes">
            <summary>
            Gets or sets the number of nodes to explore in the Zero Objective heuristic. Heuristic is performed at the end of the MIP root node, and only when no feasible solution is available.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSAuthToken">
            <summary>
            Gets or sets the when a client authenticates with a Cluster Manager using a username and password, a signed token is returned by the server to be used in further calls or command-line operations. It is used internally.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSAPIAccessID">
            <summary>
            Gets or sets the access ID for Gurobi Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSAPIACCESSID=YOUR_API_ID) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSAPISecret">
            <summary>
            Gets or sets the secret key for Gurobi Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSAPISECRET=YOUR_API_SECRET_KEY) or an empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSAppName">
            <summary>
            Gets or sets the application name which will be sent to the server to track which application is submitting the batches or jobs.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CloudAccessID">
            <summary>
            Gets or sets the access ID for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CloudSecretKey">
            <summary>
            Gets or sets the secret Key for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CloudHost">
            <summary>
            Gets or sets the host for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CloudPool">
            <summary>
            Gets or sets the cloud pool to use for Gurobi Instant Cloud.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ComputeServer">
            <summary>
            Gets or sets the name of a node in the Remote Services cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ServerPassword">
            <summary>
            Gets or sets the client password for Remote Services cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSRouter">
            <summary>
            Gets or sets the router node for Remote Services cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSGroup">
            <summary>
            Gets or sets the group placement request for cluster.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.JobID">
            <summary>
            Gets or sets the job ID for Compute Server job.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.LogFile">
            <summary>
            Gets or sets the name of the Gurobi log file.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.CSManager">
            <summary>
            Gets or sets the url of the Cluster Manager. You must set this parameter through either a gurobi.lic file (using CSMANAGER=YOUR_MANAGER_URL) or empty environment. Changing the parameter after your environment has been started will result in an error. Only for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.NodefileDir">
            <summary>
            Gets or sets the directory in which MIP node files are stored.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.ResultFile">
            <summary>
            Gets or sets the result file to write when optimization is complete.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.SolFiles">
            <summary>
            Gets or sets the location to store intermediate solution files.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.TokenServer">
            <summary>
            Gets or sets the name of token server.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.UserName">
            <summary>
            Gets or sets the user Name for Gurobi Cluster Manager.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.WorkerPassword">
            <summary>
            Gets or sets the password for the distributed workers. When using a distributed parallel algorithm (distributed MIP, distributed concurrent, or distributed tuning), this parameter is used to provide the password for the distributed workers that will be used. Use the WorkerPool parameter to point to the Remote Services cluster that will provide the distributed workers.
            </summary>
        </member>
        <member name="P:Gurobi.GRBModel.EnvParameters.WorkerPool">
            <summary>
            Gets or sets the cluster that will provide the distributed workers. When using a distributed parallel algorithm (distributed MIP, distributed concurrent, or distributed tuning), use this parameter to provide a comma-separated list of machines, each of which should be a member of a Remote Services cluster. The password for these workers should be provided via the WorkerPassword parameter. Use the ConcurrentJobs or TuneJobs parameters to indicate how many total jobs should be launched on these workers.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.Set(Gurobi.GRB.IntParam,System.Int32)">
            <summary>
            Modify the value of an int-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.IntParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.Set(Gurobi.GRB.DoubleParam,System.Double)">
            <summary>
            Modify the value of a double-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.DoubleParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.Set(Gurobi.GRB.StringParam,System.String)">
            <summary>
            Modify the value of a string-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.StringParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.Get(Gurobi.GRB.IntParam)">
            <summary>
            Retrieve the value of an integer-valued parameter.
            </summary>
            <param name="param">The parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.Get(Gurobi.GRB.DoubleParam)">
            <summary>
            Retrieve the value of a double-valued parameter.
            </summary>
            <param name="param">The parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.Get(Gurobi.GRB.StringParam)">
            <summary>
            Retrieve the value of a string-valued parameter.
            </summary>
            <param name="param">The parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.EnvParameters.#ctor(Gurobi.GRBEnv)">
            <summary>
            Create new instance of the EnvParameter class
            </summary>
            <param name="env">The environment to use</param>
        </member>
        <member name="P:Gurobi.GRBModel.Parameters">
            <summary>
            All model parameters.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.#ctor(Gurobi.GRBEnv)">
            <summary>
            Model constructor.
            </summary>
            <param name="xenv">Environment for new model.</param>
        </member>
        <member name="M:Gurobi.GRBModel.#ctor(Gurobi.GRBEnv,System.String)">
            <summary>
            Read a model from a file.
            </summary>
            <remarks>
            Note that the type of the file is encoded in the file name suffix.
            Valid suffixes are .mps, .rew, .lp, .rlp, .ilp, or .opb.
            The files can be compressed, so additional suffixes of
            .zip, .gz, .bz2, or .7z are accepted.
            </remarks>
            <param name="xenv">Environment for new model.</param>
            <param name="filename">Name of the file containing the model.</param>
        </member>
        <member name="M:Gurobi.GRBModel.#ctor(Gurobi.GRBModel)">
            <summary>
            Create a copy of an existing model.
            </summary>
            <param name="xmodel">Model to copy.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Finalize">
            <summary></summary>
        </member>
        <member name="P:Gurobi.GRBModel.Cmodel">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBModel.Dispose">
            <summary>
            Release the resources associated with a GRBModel object.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Read(System.String)">
            <summary>
            Import data from a file into the model.  Supported file suffixes are
            .mst (MIP start), .bas (simplex basis), or .prm (parameters).
            </summary>
            <param name="filename">Name of the file to read.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Write(System.String)">
            <summary>
            Export data from a model to a file.
            </summary>
            <param name="filename">Name of the file to write.</param>
            <remarks>
            The model itself can be exported by writing a .mps, .rew, .lp, or .rlp file.
            Additionally, you can write a .ilp file (for writing an IIS),
            a .sol file (for writing the current solution vector),
            a .mst file (for writing the current MIP solution as a start vector),
            a .bas file (for writing the current simplex basis),
            or a .prm file (for writing modified parameter settings).
            </remarks>
        </member>
        <member name="M:Gurobi.GRBModel.Sync">
            <summary>
            When performing non-blocking optimization on a Compute Server,
            call this routine to wait for the optimization to finish.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.FixedModel">
            <summary>
            Create the fixed model associated with a MIP model, where
            every integer variable is fixed to the value that variables takes
            in the current MIP solution.
            </summary>
            <returns>Fixed model associated with calling object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Presolve">
            <summary>
            Return the presolved version of the model.
            </summary>
            <returns>Presolved version of original model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Relax">
            <summary>
            Return the relaxed version of the MIP model, in which all integrality
            restrictions, SOS conditions, semi-continuous and semi-integer
            requirements on variables have been relaxed .
            </summary>
            <remarks>
            If the model is already continuous, then this method produces the
            same result as cloning the model.
            </remarks>
            <example>
            relaxed = model.Relax();
            relaxed.Optimize();
            </example>
            <returns>Integer-relaxed version of original model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Linearize">
            <summary>
            Return the linearized version of the MIQP model.
            </summary>
            <example>
            linearized = model.Linearize();
            linearized.Optimize();
            </example>
            <returns>A new model, containing the linearized version of the original
            model</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Feasibility">
            <summary>
            Returns a copy of the given model with a cancelled objective function.
            </summary>
            <example>
            feasibility = model.Feasibility();
            feasibility.Optimize();
            </example>
            <returns>A new model, containing the feasibility version of the
            original model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.SingleScenarioModel">
            <summary>
            Returns a copy of the single scenario model specified by the "ScenarioNumber" parameter.
            </summary>
            <example>
            singlescenario = model.SingleScenarioModel();
            singlescenario.Optimize();
            </example>
            <returns>A new model, containing just a single scenario of the original
            multi-scenario model. The scenario can be selected by the setting the
            "ScenarioNumber" parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.FeasRelax(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Relax a model by adding penalty variables with a penalty objective
            in a simple way.
            </summary>
            <param name="relaxobjtype">
            The cost function used when finding the minimum cost relaxation.
            </param>
            <param name="minrelax">
            The type of feasibility relaxation to perform.
            </param>
            <param name="vrelax">
            Indicates whether variable bounds can be relaxed
            (with a cost of 1.0 for any violations).
            </param>
            <param name="crelax">
            Indicates whether linear constraints can be relaxed
            (with a cost of 1.0 for any violations).
            </param>
            <returns>
            Zero if minrelax is false. If minrelax is true, the return value is the
            objective value for the relaxation performed. If the value is less than
            0, it indicates that the method failed to create the feasibility relaxation.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.FeasRelax(System.Int32,System.Boolean,Gurobi.GRBVar[],System.Double[],System.Double[],Gurobi.GRBConstr[],System.Double[])">
            <summary>
            Relax a model by adding penalty variables with a penalty objective.
            </summary>
            <param name="relaxobjtype">
            The cost function used when finding the minimum cost relaxation.
            </param>
            <param name="minrelax">
            The type of feasibility relaxation to perform.
            </param>
            <param name="xvars">
            Variables whose bounds are allowed to be violated.
            </param>
            <param name="lbpen">
            Penalty for violating a variable lower bound.
            One entry for each variable in argument vars.
            </param>
            <param name="ubpen">
            Penalty for violating a variable upper bound.
            One entry for each variable in argument vars.
            </param>
            <param name="xconstrs">
            Linear constraints that are allowed to be violated.
            </param>
            <param name="rhspen">
            Penalty for violating a linear constraint.
            One entry for each variable in argument constr.
            </param>
            <returns>
            Zero if minrelax is false. If minrelax is true, the return value is the
            objective value for the relaxation performed. If the value is less than
            0, it indicates that the method failed to create the feasibility relaxation.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetVars">
            <summary>
            Return an array containing all variables in the model.
            </summary>
            <returns>All variables in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetVarByName(System.String)">
            <summary>
            Retrieve a variable from its name.
            </summary>
            <remarks>
            If multiple variable have the same name, this method chooses one arbitrarily.
            </remarks>
            <param name="name">The name of the desired variable.</param>
            <returns>The requested variable.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetConstrs">
            <summary>
            Return an array containing all linear constraints in the model.
            </summary>
            <returns>All linear constraints in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetConstrByName(System.String)">
            <summary>
            Retrieve a linear constraint from its name.
            </summary>
            <remarks>
            If multiple constraints have the same name, this method chooses one arbitrarily.
            </remarks>
            <param name="name">The name of the desired constraint.</param>
            <returns>The requested constraint.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetSOSs">
            <summary>
            Retrieve an array containing all SOS constraints in the model.
            </summary>
            <returns>All SOS constraints in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetQConstrs">
            <summary>
            Retrieve an array of all quadratic constraints in the model.
            </summary>
            <returns>All quadratic constraints in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrs">
            <summary>
            Retrieve an array of all general constraints in the model.
            </summary>
            <returns>All general constraints in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetJSONSolution">
            <summary>
            Retrieve a JSON string representation of the current solution
            </summary>
            <remarks>
            You must call optimize() before calling this method.
            </remarks>
            <returns>A string representation of the JSON solution object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetObjective">
            <summary>
            Retrieve the model objective.
            </summary>
            <remarks>
            Note that the constant and linear portions of the objective can also
            be retrieved using the <see cref="F:Gurobi.GRB.DoubleAttr.ObjCon"/> and
            <see cref="F:Gurobi.GRB.DoubleAttr.Obj"/> attributes.
            </remarks>
            <returns>The model objective.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetObjective(System.Int32)">
            <summary>
            Retrieve one of multiple objectives.
            </summary>
            <remarks>
            Note that this routine returns the main optimization
            objective when the index argument is 0.
            The return value will always be a linear expression.  An
            exception is thrown if the index is 0 and
            the main optimization objective isn't linear.
            <param name="index">Index of objective to retrieve.</param>
            </remarks>
            <returns>The model objective.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetPWLObj(Gurobi.GRBVar,System.Double[],System.Double[])">
            <summary>
            Retrieve the piecewise-linear objective for the specified variable.
            </summary>
            <param name="v">
            The variable whose objective function is being retrieved.
            </param>
            <param name="x">
            The x values for the points that define the piecewise-linear function.
            These will always be in non-decreasing order.
            </param>
            <param name="y">The y values for the points that define the
            piecewise-linear function.
            </param>
            <returns>The number of points that define the piecewise-linear objective function.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.SetObjective(Gurobi.GRBExpr)">
            <summary>
            Set the model objective equal to a linear or quadratic expression.
            </summary>
            <remarks>
            Note that you can also modify the linear portion of a model objective
            using the <see cref="F:Gurobi.GRB.DoubleAttr.Obj"/> variable attribute. If you
            wish to mix and match these two approaches, please note that this method
            replaces the entire existing objective, while the
            <see cref="F:Gurobi.GRB.DoubleAttr.Obj"/> attribute can be used to modify
            individual linear terms.
            </remarks>
            <param name="obje">New model objective.</param>
        </member>
        <member name="M:Gurobi.GRBModel.SetObjective(Gurobi.GRBExpr,System.Int32)">
            <summary>
            Set the model objective equal to a linear or quadratic expression.
            </summary>
            <remarks>
            Note that you can also modify the linear portion of a model objective
            using the <see cref="F:Gurobi.GRB.DoubleAttr.Obj"/> variable attribute. If you
            wish to mix and match these two approaches, please note that this method
            replaces the entire existing objective, while the
            <see cref="F:Gurobi.GRB.DoubleAttr.Obj"/> attribute can be used to modify
            individual linear terms.
            </remarks>
            <param name="obje">New model objective.</param>
            <param name="sense">
            New optimization sense (<see cref="F:Gurobi.GRB.MINIMIZE"/>
            for minimization, <see cref="F:Gurobi.GRB.MAXIMIZE"/> for maximization).
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.SetObjectiveN(Gurobi.GRBLinExpr,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Set one of multiple objectives equal to a linear expression.  If the
            index argument is zero, this sets the main optimization objective.
            </summary>
            <remarks>
            </remarks>
            <param name="obje">Linear expression that captures the objective.</param>
            <param name="index">Index of the objective.</param>
            <param name="priority">Priority of the objective.</param>
            <param name="weight">Weight of the objective.</param>
            <param name="abstol">Absolute tolerance for the objective.</param>
            <param name="reltol">Relative tolerance for the objective.</param>
            <param name="name">Name of the objective.</param>
        </member>
        <member name="M:Gurobi.GRBModel.SetPWLObj(Gurobi.GRBVar,System.Double[],System.Double[])">
            <summary>
            Set a piecewise-linear objective function for a variable.
            </summary>
            <remarks>
            The arguments to this method specify a list of points that define a
            piecewise-linear objective function for a single variable. Specifically,
            the <paramref name="x"/> and <paramref name="y"/> arguments give
            coordinates for the vertices of the function.
            </remarks>
            <param name="v">The variable whose objective function is being set.</param>
            <param name="x">
            The x values for the points that define the piecewise-linear
            function. Must be in non-decreasing order.
            </param>
            <param name="y">
            The y values for the points that define the piecewise-linear function.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Optimize">
            <summary>
            Optimize the model. The algorithm used for the optimization
            depends on the model type (simplex or barrier for a continuous
            model; branch-and-cut for a MIP model).
            </summary>
            <remarks>
            Upon successful completion, this method will populate the
            solution related attributes of the model.
            </remarks>
        </member>
        <member name="M:Gurobi.GRBModel.OptimizeAsync">
            <summary>
            Optimize a model asynchronously. This routine returns immediately.
            Your program can perform other computations while optimization
            proceeds in the background. To check the state of the asynchronous
            optimization, query the Status attribute
            for the model. A value of "IN_PROGRESS" indicates that the
            optimization has not yet completed. When you are done with your
            foreground tasks, you must call sync() to synchronize your foreground
            program with the asynchronous optimization task.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.OptimizeBatch">
            <summary>
            Submit a Batch Optimization request to the Cluster Manager.
            </summary>
            <remarks>
            Upon successful completion, this method will return the batchID
            string associated with this batch request.
            </remarks>
        </member>
        <member name="M:Gurobi.GRBModel.ComputeIIS">
            <summary>
            Compute an Irreducible Infeasible Subsystem (IIS) for an infeasible
            model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Reset">
            <summary>
            Reset the model to an unsolved state, discarding
            any previously computed solution information.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Reset(System.Int32)">
            <summary>
            Reset the model to an unsolved state, discarding
            any previously computed solution information
            <param name="clearall">
            Should additional information such as MIP starts,
            variable hints, branching priorities, lazy flags, and partition
            information be cleared?
            </param>
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Check">
            <summary></summary>
        </member>
        <member name="M:Gurobi.GRBModel.Terminate">
            <summary>
            Generate a request to terminate the current optimization.
            This method can be called at any time during the optimization.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Tune">
            <summary>
            Perform an automated search for parameter settings that improve
            performance.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.GetTuneResult(System.Int32)">
            <summary>
            Perform an automated search for parameter settings that improve
            performance.
            </summary>
            <param name="n">
            The index of the tuning result to retrieve. The best result is
            available as index 0. The number of stored results is available
            in attribute <see cref="F:Gurobi.GRB.IntAttr.TuneResultCount"/>.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Update">
            <summary>
            Process any pending model modifications.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.AddVar(System.Double,System.Double,System.Double,System.Char,System.String)">
            <summary>
            Add a new variable to the model.
            </summary>
            <param name="lb">Lower bound for new variable.</param>
            <param name="ub">Upper bound for new variable.</param>
            <param name="obj">Objective coefficient for new variable.</param>
            <param name="type">
            Variable type for new variable (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            </param>
            <param name="name">Name for new variable.</param>
            <returns>New variable object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddVar(System.Double,System.Double,System.Double,System.Char,Gurobi.GRBConstr[],System.Double[],System.String)">
            <summary>
            Add a new variable to the model.
            </summary>
            <param name="lb">Lower bound for new variable.</param>
            <param name="ub">Upper bound for new variable.</param>
            <param name="obj">Objective coefficient for new variable.</param>
            <param name="type">
            Variable type for new variable (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            </param>
            <param name="xconstrs">
            Array of constraints in which the variable participates.
            </param>
            <param name="coeffs">
            Array of coefficients for each constraint in which the variable
            participates. The lengths of <paramref name="xconstrs"/> and
            <paramref name="coeffs"/> must be identical.
            </param>
            <param name="name">Name for new variable.</param>
            <returns>New variable object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddVar(System.Double,System.Double,System.Double,System.Char,Gurobi.GRBColumn,System.String)">
            <summary>
            Add a new variable to the model.
            </summary>
            <param name="lb">Lower bound for new variable.</param>
            <param name="ub">Upper bound for new variable.</param>
            <param name="obj">Objective coefficient for new variable.</param>
            <param name="type">
            Variable type for new variable (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            </param>
            <param name="col">
            <see cref="T:Gurobi.GRBColumn"/> object for specifying a set of
            constraints to which new variable belongs.
            </param>
            <param name="name">Name for new variable.</param>
            <returns>New variable object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddVars(System.Int32,System.Char)">
            <summary>
            Add new variables to the model.
            </summary>
            <param name="cnt">Number of variables to add.</param>
            <param name="type">
            Variable type for new variables (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            </param>
            <returns>Array of new variable objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddVars(System.Double[],System.Double[],System.Double[],System.Char[],System.String[])">
            <summary>
            Add new variables to the model.
            </summary>
            <param name="lb">
            Lower bounds for new variables. Can be <c>null</c>, in which
            case the variables get lower bounds of 0.0.
            </param>
            <param name="ub">
            Upper bounds for new variables. Can be <c>null</c>, in which
            case the variables get infinite upper bounds.
            </param>
            <param name="obj">
            Objective coefficients for new variables. Can be <c>null</c>,
            in which case the variables get objective coefficients of 0.0.
            </param>
            <param name="type">
            Variable types for new variables (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            Can be <c>null</c>, in which case the variables are assumed to
            be continuous.
            </param>
            <param name="name">
            Names for new variables. Can be <c>null</c>, in which case all
            variables are given default names.
            </param>
            <returns>Array of new variable objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddVars(System.Double[],System.Double[],System.Double[],System.Char[],System.String[],System.Int32,System.Int32)">
            <summary>
            Add new variables to the model.
            </summary>
            <param name="lb">
            Lower bounds for new variables. Can be <c>null</c>, in which
            case the variables get lower bounds of 0.0.
            </param>
            <param name="ub">
            Upper bounds for new variables. Can be <c>null</c>, in which
            case the variables get infinite upper bounds.
            </param>
            <param name="obj">
            Objective coefficients for new variables. Can be <c>null</c>,
            in which case the variables get objective coefficients of 0.0.
            </param>
            <param name="type">
            Variable types for new variables (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            Can be <c>null</c>, in which case the variables are assumed to
            be continuous.
            </param>
            <param name="name">
            Names for new variables. Can be <c>null</c>, in which case all
            variables are given default names.
            </param>
            <param name="start">The first variable in the list to add.</param>
            <param name="len">The number of variables to add.</param>
            <returns>Array of new variable objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddVars(System.Double[],System.Double[],System.Double[],System.Char[],System.String[],Gurobi.GRBColumn[])">
            <summary>
            Add new variables to the model.
            </summary>
            <param name="lb">
            Lower bounds for new variables. Can be <c>null</c>, in which
            case the variables get lower bounds of 0.0.
            </param>
            <param name="ub">
            Upper bounds for new variables. Can be <c>null</c>, in which
            case the variables get infinite upper bounds.
            </param>
            <param name="obj">
            Objective coefficients for new variables. Can be <c>null</c>,
            in which case the variables get objective coefficients of 0.0.
            </param>
            <param name="type">
            Variable types for new variables (<see cref="F:Gurobi.GRB.CONTINUOUS"/>,
            <see cref="F:Gurobi.GRB.BINARY"/>, <see cref="F:Gurobi.GRB.INTEGER"/>,
            <see cref="F:Gurobi.GRB.SEMICONT"/>, or <see cref="F:Gurobi.GRB.SEMIINT"/>).
            Can be <c>null</c>, in which case the variables are assumed to
            be continuous.
            </param>
            <param name="name">
            Names for new variables. Can be <c>null</c>, in which case all
            variables are given default names.
            </param>
            <param name="col">
            <see cref="T:Gurobi.GRBColumn"/> objects for specifying a set of constraints
            to which each new column belongs.
            </param>
            <returns>Array of new variable objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)">
            <summary>
            Add a new constraint to the model.
            </summary>
            <param name="constr">
            Temporary constraint object, created by an overloaded comparison operator.
            See <see cref="T:Gurobi.GRBTempConstr"/> for more information.
            </param>
            <param name="name">Name for new constraint.</param>
            <returns>New constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBLinExpr,System.Char,Gurobi.GRBLinExpr,System.String)">
            <summary>
            Add a new linear constraint to the model.
            </summary>
            <param name="expr1">
            Left-hand side expression for new linear constraint
            </param>
            <param name="sense">
            Sense for new linear constraint (<see cref="F:Gurobi.GRB.LESS_EQUAL"/>,
            <see cref="F:Gurobi.GRB.EQUAL"/>, or <see cref="F:Gurobi.GRB.GREATER_EQUAL"/>)
            </param>
            <param name="expr2">
            Right-hand side expression for new linear constraint.
            </param>
            <param name="name">Name for new constraint.</param>
            <returns>New constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddRange(Gurobi.GRBLinExpr,System.Double,System.Double,System.String)">
            <summary>
            Add a new range constraint to the model.
            </summary>
            <param name="expr">Linear expression for new range constraint.</param>
            <param name="lower">Lower bound for linear expression.</param>
            <param name="upper">Upper bound for linear expression.</param>
            <param name="name">Name for new constraint.</param>
            <returns>New constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddConstrs(System.Int32)">
            <summary>
            Add new linear constraints to the model.
            </summary>
            <remarks>
            We recommend that you build your model one constraint at a time (using
            AddConstr), since it introduces no significant overhead
            and we find that it produces simpler code. Feel free to use these
            methods if you disagree, though.
            </remarks>
            <param name="cnt">Number of constraints to add.</param>
            <returns>Array of new constraint objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddConstrs(Gurobi.GRBLinExpr[],System.Char[],System.Double[],System.String[])">
            <summary>
            Add new linear constraints to the model.
            </summary>
            <param name="expr">
            Left-hand side expressions for the new linear constraints.
            </param>
            <param name="sense">
            Senses for new linear constraints (<see cref="F:Gurobi.GRB.LESS_EQUAL"/>,
            <see cref="F:Gurobi.GRB.EQUAL"/>, or <see cref="F:Gurobi.GRB.GREATER_EQUAL"/>)
            </param>
            <param name="rhs">
            Right-hand side values for the new linear constraints.
            </param>
            <param name="names">
            Names for new constraints.
            </param>
            <returns>Array of new constraint objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddConstrs(Gurobi.GRBLinExpr[],System.Char[],System.Double[],System.String[],System.Int32,System.Int32)">
            <summary>
            Add new linear constraints to the model.
            </summary>
            <param name="expr">
            Left-hand side expressions for the new linear constraints.
            </param>
            <param name="sense">
            Senses for new linear constraints (<see cref="F:Gurobi.GRB.LESS_EQUAL"/>,
            <see cref="F:Gurobi.GRB.EQUAL"/>, or <see cref="F:Gurobi.GRB.GREATER_EQUAL"/>)
            </param>
            <param name="rhs">
            Right-hand side values for the new linear constraints.
            </param>
            <param name="names">
            Names for new constraints.
            </param>
            <param name="start">The first constraint in the list to add.</param>
            <param name="len">The number of variables to add.</param>
            <returns>Array of new constraint objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddRanges(Gurobi.GRBLinExpr[],System.Double[],System.Double[],System.String[])">
            <summary>
            Add new range constraints to the model.
            </summary>
            <param name="expr">
            Linear expressions for the new range constraints.
            </param>
            <param name="lower">Lower bounds for linear expressions.</param>
            <param name="upper">Upper bounds for linear expressions.</param>
            <param name="names">Names for new range constraints.</param>
            <returns>Array of new constraint objects.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Remove(Gurobi.GRBVar)">
            <summary>
            Remove the specified variable from the model.
            </summary>
            <remarks>
            Note that the variable isn't actually removed from the model until
            the next call to <see cref="M:Gurobi.GRBModel.Optimize"/> or
            <see cref="M:Gurobi.GRBModel.Update"/> on that model.
            </remarks>
            <param name="v">The variable to remove.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Remove(Gurobi.GRBConstr)">
            <summary>
            Remove the specified constraint from the model.
            </summary>
            <remarks>
            Note that the constraint isn't actually removed from the model until
            the next call to <see cref="M:Gurobi.GRBModel.Optimize"/> or
            <see cref="M:Gurobi.GRBModel.Update"/> on that model.
            </remarks>
            <param name="c">The constraint to remove.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Remove(Gurobi.GRBGenConstr)">
            <summary>
            Remove the specified general constraint from the model.
            </summary>
            <remarks>
            Note that the constraint isn't actually removed from the model until
            the next call to <see cref="M:Gurobi.GRBModel.Optimize"/> or
            <see cref="M:Gurobi.GRBModel.Update"/> on that model.
            </remarks>
            <param name="c">The general constraint to remove.</param>
        </member>
        <member name="M:Gurobi.GRBModel.ChgCoeff(Gurobi.GRBConstr,Gurobi.GRBVar,System.Double)">
            <summary>
            Change the coefficient for the specified variable in the specified
            constraint to the specified new value.
            </summary>
            <remarks>
            Note that the change won't take effect until the next call to
            <see cref="M:Gurobi.GRBModel.Optimize"/> or <see cref="M:Gurobi.GRBModel.Update"/>
            on that model.
            </remarks>
            <param name="c">Constraint for coefficient to be changed.</param>
            <param name="v">Variable for coefficient to be changed.</param>
            <param name="xval">Desired new value for coefficient.</param>
        </member>
        <member name="M:Gurobi.GRBModel.ChgCoeffs(Gurobi.GRBConstr[],Gurobi.GRBVar[],System.Double[])">
            <summary>
            Change the coefficients for a list of constraint, variables pairs.
            </summary>
            <remarks>
            Note that the changes won't take effect until the next call to
            <see cref="M:Gurobi.GRBModel.Optimize"/> or <see cref="M:Gurobi.GRBModel.Update"/>
            on that model.
            </remarks>
            <param name="xconstrs">Constraints for coefficients to be changed.</param>
            <param name="xvars">Variables for coefficients to be changed.</param>
            <param name="val">Desired new values for coefficients.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetCoeff(Gurobi.GRBConstr,Gurobi.GRBVar)">
            <summary>
            Retrieve the coefficient for the specified variable in the specified
            constraint.
            </summary>
            <param name="c">The requested constraint.</param>
            <param name="v">The requested variable.</param>
            <returns>The current value of the requested coefficient.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetCol(Gurobi.GRBVar)">
            <summary>
            Retrieve a column from the constraint matrix.
            </summary>
            <param name="v">The variable of interest.</param>
            <returns>
            A <see cref="T:Gurobi.GRBColumn"/> object that captures the set of constraints
            in which the variable participates.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetRow(Gurobi.GRBConstr)">
            <summary>
            Retrieve a row from the constraint matrix.
            </summary>
            <param name="c">The constraint of interest.</param>
            <returns>
            A <see cref="T:Gurobi.GRBLinExpr"/> object that captures the set
            of variables that participate in the constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetQCRow(Gurobi.GRBQConstr)">
            <summary>
            Retrieve the left-hand side expression from a quadratic constraint.
            </summary>
            <returns>
            A <see cref="T:Gurobi.GRBQuadExpr"/> object that captures the left-hand
            side of the quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrMax(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar[]@,System.Double@)">
            <summary>
            Retrieve the data associated with a general constraint of type MAX.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
            <param name="constant">Constant in general constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrMin(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar[]@,System.Double@)">
            <summary>
            Retrieve the data associated with a general constraint of type MIN.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
            <param name="constant">Constant in general constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrAbs(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@)">
            <summary>
            Retrieve the data associated with a general constraint of type ABS.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="argvar">Argument variable in general constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrAnd(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar[]@)">
            <summary>
            Retrieve the data associated with a general constraint of type AND.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrOr(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar[]@)">
            <summary>
            Retrieve the data associated with a general constraint of type OR.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrIndicator(Gurobi.GRBGenConstr,Gurobi.GRBVar@,System.Int32@,Gurobi.GRBLinExpr@,System.Char@,System.Double@)">
            <summary>
            Retrieve the data associated with a general constraint of type INDICATOR.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="binvar">
            Antecedent variable of indicator constraint.
            </param>
            <param name="binval">
            Value of antecedent variable that activates the linear constraint.
            </param>
            <param name="expr">
            Left-hand side of the linear constraint triggered by the indicator.
            </param>
            <param name="sense">
            Sense of constraint triggered by the indicator
            (e.g. <see cref="F:Gurobi.GRB.LESS_EQUAL"/>)
            </param>
            <param name="rhs">
            Right-hand side of linear constraint triggered by the indicator.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrPWL(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@,System.Int32@,System.Double[],System.Double[])">
            <summary>
            Retrieve the data associated with a general constraint of type PWL.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="npts">The number of points defining PWL constraint.</param>
            <param name="xpts">x values for breakpoints.</param>
            <param name="ypts">y values for breakpoints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrPoly(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@,System.Int32@,System.Double[])">
            <summary>
            Retrieve the data associated with a general constraint of type POLY.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="plen">The length of array p.</param>
            <param name="p">Coefficients for polynomial function.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrExp(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@)">
            <summary>
            Retrieve the data associated with a general constraint of type EXP.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrExpA(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@,System.Double@)">
            <summary>
            Retrieve the data associated with a general constraint of type EXPA.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="a">Base for exponential function.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrLog(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@)">
            <summary>
            Retrieve the data associated with a general constraint of type LOG.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrLogA(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@,System.Double@)">
            <summary>
            Retrieve the data associated with a general constraint of type LOGA.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="a">Base for exponential function.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrPow(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@,System.Double@)">
            <summary>
            Retrieve the data associated with a general constraint of type POW.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="a">The exponent of the function.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrSin(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@)">
            <summary>
            Retrieve the data associated with a general constraint of type SIN.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrCos(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@)">
            <summary>
            Retrieve the data associated with a general constraint of type COS.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetGenConstrTan(Gurobi.GRBGenConstr,Gurobi.GRBVar@,Gurobi.GRBVar@)">
            <summary>
            Retrieve the data associated with a general constraint of type TAN.
            You can query the
            <see cref="F:Gurobi.GRB.IntAttr.GenConstrType"/> attribute to determine the
            type of the general constraint and also the option attributes for the
            PWL translation.
            </summary>
            <param name="genc">The constraint of interest.</param>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
        </member>
        <member name="M:Gurobi.GRBModel.AddSOS(Gurobi.GRBVar[],System.Double[],System.Int32)">
            <summary>
            Add a new SOS constraint to the model.
            </summary>
            <param name="xvars">Array of variables that participate in the SOS constraint.</param>
            <param name="weight">Weights for the variables in the SOS constraint.</param>
            <param name="type">
            SOS type (can be <see cref="F:Gurobi.GRB.SOS_TYPE1"/> or <see cref="F:Gurobi.GRB.SOS_TYPE2"/>).
            </param>
            <returns>New SOS constraint.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddQConstr(Gurobi.GRBTempConstr,System.String)">
            <summary>
            Add a new quadratic constraint to the model.
            </summary>
            <param name="qconstr">
            Temporary constraint object, created by an overloaded comparison operator.
            See <see cref="T:Gurobi.GRBTempConstr"/> for more information.
            </param>
            <param name="name">Name for new constraint.</param>
            <returns>New quadratic constraint object.</returns>
            <returns></returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddQConstr(Gurobi.GRBQuadExpr,System.Char,Gurobi.GRBQuadExpr,System.String)">
            <summary>
            Add a new quadratic constraint to the model.
            </summary>
            <param name="expr1">
            Left-hand side expression for new quadratic constraint
            </param>
            <param name="sense">
            Sense for new quadratic constraint (<see cref="F:Gurobi.GRB.LESS_EQUAL"/>,
            <see cref="F:Gurobi.GRB.EQUAL"/>, or <see cref="F:Gurobi.GRB.GREATER_EQUAL"/>)
            </param>
            <param name="expr2">
            Right-hand side expression for new quadratic constraint.
            </param>
            <param name="name">Name for new constraint.</param>
            <returns>New quadratic constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrMax(Gurobi.GRBVar,Gurobi.GRBVar[],System.Double,System.String)">
            <summary>
            Add a general constraint of type MAX to the model.
            </summary>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
            <param name="constant">Constant in general constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrMin(Gurobi.GRBVar,Gurobi.GRBVar[],System.Double,System.String)">
            <summary>
            Add a general constraint of type MIN to the model.
            </summary>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
            <param name="constant">Constant in general constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrAbs(Gurobi.GRBVar,Gurobi.GRBVar,System.String)">
            <summary>
            Add a general constraint of type ABS to the model.
            </summary>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="argvar">Argument variable in general constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrAnd(Gurobi.GRBVar,Gurobi.GRBVar[],System.String)">
            <summary>
            Add a general constraint of type AND to the model.
            </summary>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrOr(Gurobi.GRBVar,Gurobi.GRBVar[],System.String)">
            <summary>
            Add a general constraint of type OR to the model.
            </summary>
            <param name="resvar">Resultant variable in general constraint.</param>
            <param name="vars">Operand variables in general constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrIndicator(Gurobi.GRBVar,System.Int32,Gurobi.GRBLinExpr,System.Char,System.Double,System.String)">
            <summary>
            Add a general constraint of type INDICATOR to the model.
            </summary>
            <param name="binvar">
            Antecedent variable of indicator constraint.
            </param>
            <param name="binval">
            Value of antecedent variable that activates the linear constraint.
            </param>
            <param name="expr">
            Left-hand side of the linear constraint triggered by the indicator.
            </param>
            <param name="sense">
            Sense of constraint triggered by the indicator
            (e.g. <see cref="F:Gurobi.GRB.LESS_EQUAL"/>)
            </param>
            <param name="rhs">
            Right-hand side of linear constraint triggered by the indicator.
            </param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrIndicator(Gurobi.GRBVar,System.Int32,Gurobi.GRBTempConstr,System.String)">
            <summary>
            Add a general constraint of type INDICATOR to the model.
            </summary>
            <param name="binvar">
            Antecedent variable of indicator constraint.
            </param>
            <param name="binval">
            Value of antecedent variable that activates the linear constraint.
            </param>
            <param name="constr">Linear constraint triggered by the indicator.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrPWL(Gurobi.GRBVar,Gurobi.GRBVar,System.Double[],System.Double[],System.String)">
            <summary>
            Add a general constraint of type PWL to the model.
            </summary>
            <param name="xvar"> x variable for constraint. </param>
            <param name="yvar"> y variable for constraint. </param>
            <param name="xpts">x values for breakpoints.</param>
            <param name="ypts">y values for breakpoints.</param>
            <param name="name">Name for new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrPoly(Gurobi.GRBVar,Gurobi.GRBVar,System.Double[],System.String,System.String)">
            <summary>
            Add a general constraint of type POLY to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="p">Coefficients for polynomial function.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrExp(Gurobi.GRBVar,Gurobi.GRBVar,System.String,System.String)">
            <summary>
            Add a general constraint of type EXP to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrExpA(Gurobi.GRBVar,Gurobi.GRBVar,System.Double,System.String,System.String)">
            <summary>
            Add a general constraint of type EXPA to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="a">Base for exponential function.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrLog(Gurobi.GRBVar,Gurobi.GRBVar,System.String,System.String)">
            <summary>
            Add a general constraint of type LOG to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrLogA(Gurobi.GRBVar,Gurobi.GRBVar,System.Double,System.String,System.String)">
            <summary>
            Add a general constraint of type LOGA to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="a">Base for logarithmic function.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrPow(Gurobi.GRBVar,Gurobi.GRBVar,System.Double,System.String,System.String)">
            <summary>
            Add a general constraint of type POW to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="a">The exponent of the function.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrSin(Gurobi.GRBVar,Gurobi.GRBVar,System.String,System.String)">
            <summary>
            Add a general constraint of type SIN to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrCos(Gurobi.GRBVar,Gurobi.GRBVar,System.String,System.String)">
            <summary>
            Add a general constraint of type COS to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.AddGenConstrTan(Gurobi.GRBVar,Gurobi.GRBVar,System.String,System.String)">
            <summary>
            Add a general constraint of type TAN to the model.
            </summary>
            <param name="xvar">x variable for constraint.</param>
            <param name="yvar">y variable for constraint.</param>
            <param name="name">Name for new general constraint.</param>
            <param name="options">Options for PWL translation of new general constraint.</param>
            <returns>New general constraint object.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetSOS(Gurobi.GRBSOS,Gurobi.GRBVar[],System.Double[],System.Int32[])">
            <summary>
            Retrieve details about the specified SOS constraint.
            </summary>
            <remarks>
            Note that the argument arrays must be long enough to accomodate the
            result. Call the method with null array arguments to determine the
            appropriate array lengths.
            </remarks>
            <param name="xsos">The SOS set of interest.</param>
            <param name="xvars">
            A list of variables that participate in <paramref name="xsos"/>.
            Can be <c>null</c>.
            </param>
            <param name="weight">
            The SOS weights for each participating variable.
            Can be <c>null</c>.
            </param>
            <param name="type">
            The type of the SOS set (either <see cref="F:Gurobi.GRB.SOS_TYPE1"/> or
            <see cref="F:Gurobi.GRB.SOS_TYPE2"/>) is returned in <c>type[0]</c>.
            </param>
            <returns>
            The number of entries placed in the output arrays. Note that you should
            consult the return value to determine the length of the result; the
            arrays sizes won't necessarily match the result size.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Remove(Gurobi.GRBSOS)">
            <summary>
            Remove the specified SOS constraint from the model.
            </summary>
            <remarks>
            Note that the SOS constraint isn't actually removed from the model
            until the next call to <see cref="M:Gurobi.GRBModel.Optimize"/> or
            <see cref="M:Gurobi.GRBModel.Update"/> on that model.
            </remarks>
            <param name="xsos">The SOS constraint to remove.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Remove(Gurobi.GRBQConstr)">
            <summary>
            Remove the specified quadratic constraint from the model.
            </summary>
            <remarks>
            Note that the quadratic constraint isn't actually removed from the model
            until the next call to <see cref="M:Gurobi.GRBModel.Optimize"/> or
            <see cref="M:Gurobi.GRBModel.Update"/> on that model.
            </remarks>
            <param name="xqconstr">The quadratic constraint to remove.</param>
        </member>
        <member name="M:Gurobi.GRBModel.GetEnv">
            <summary>
            Retrieve the <see cref="T:Gurobi.GRBEnv"/> object associated with the specified model.
            </summary>
            <remarks>
            Note that each model makes its own copy of the environment when it is created.
            To change parameters for a model, for example, you should use this
            method to obtain the appropriate environment object.
            </remarks>
            <returns>The environment for the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.GetConcurrentEnv(System.Int32)">
            <summary>
            Create/Retrieve a concurrent environment for the specified model.
            </summary>
            <remarks>Note that you must create contiguously numbered concurrent
            environments, starting with <paramref name="num"/> = 0. For example,
            if you want three concurrent environments, they must be numbered 0,
            1, and 2. Once you create concurrent environments, they will be used
            for every subsequent concurrent optimization on that model.
            </remarks>
            <param name="num">The concurrent environment number.</param>
            <returns>The concurrent environment for the model.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.DiscardConcurrentEnvs">
            <summary>
            Destroy all concurrent environments associated with a model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.GetMultiobjEnv(System.Int32)">
            <summary>
            Create/Retrieve a multiobj environment for the specified model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.DiscardMultiobjEnvs">
            <summary>
            Destroy all multiobj environments associated with a model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntParam)">
            <summary>
            Retrieve the value of an integer-valued parameter.
            </summary>
            <param name="param">The parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleParam)">
            <summary>
            Retrieve the value of a double-valued parameter.
            </summary>
            <param name="param">The parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringParam)">
            <summary>
            Retrieve the value of a string-valued parameter.
            </summary>
            <param name="param">The parameter being queried.</param>
            <returns>The current value of the requested parameter.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntParam,System.Int32)">
            <summary>
            Modify the value of an int-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.IntParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleParam,System.Double)">
            <summary>
            Modify the value of a double-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.DoubleParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringParam,System.String)">
            <summary>
            Modify the value of a string-valued parameter.
            </summary>
            <param name="param">The <see cref="T:Gurobi.GRB.StringParam"/> parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(System.String,System.String)">
            <summary>
            Modify the value of a parameter.
            </summary>
            <param name="param">The name of the parameter being modified.</param>
            <param name="newvalue">The desired new value of the parameter.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Retrieve the value of an integer-valued model attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr)">
            <summary>
            Retrieve the value of a double-valued model attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr)">
            <summary>
            Retrieve the value of a string-valued model attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,System.Int32)">
            <summary>
            Modify the value of an integer-valued model attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,System.Double)">
            <summary>
            Modify the value of a double-valued model attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,System.String)">
            <summary>
            Modify the value of a string-valued model attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBVar[])">
            <summary>
            Retrieve an int-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBVar[])">
            <summary>
            Retrieve a char-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[])">
            <summary>
            Retrieve a double-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBVar[])">
            <summary>
            Retrieve a string-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Retrieve an int-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="xvars">
            The variables whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Retrieve a char-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Retrieve a double-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Retrieve a string-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBVar[0:,0:])">
            <summary>
            Retrieve an int-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBVar[0:,0:])">
            <summary>
            Retrieve a char-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[0:,0:])">
            <summary>
            Retrieve a double-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBVar[0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBVar[0:,0:,0:])">
            <summary>
            Retrieve an int-valued attribute for an array of variables.
            </summary>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBVar[0:,0:,0:])">
            <summary>
            Retrieve a char-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[0:,0:,0:])">
            <summary>
            Retrieve a double-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBVar[0:,0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="vars">
            The variables whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[])">
            <summary>
            Retrieve an int-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[])">
            <summary>
            Retrieve a char-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[])">
            <summary>
            Retrieve a double-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[])">
            <summary>
            Retrieve a string-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve an int-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a char-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a double-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a string-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[0:,0:])">
            <summary>
            Retrieve an int-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[0:,0:])">
            <summary>
            Retrieve a char-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[0:,0:])">
            <summary>
            Retrieve a double-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[0:,0:,0:])">
            <summary>
            Retrieve an int-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[0:,0:,0:])">
            <summary>
            Retrieve a char-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[0:,0:,0:])">
            <summary>
            Retrieve a double-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[0:,0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="constrs">
            The constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBQConstr[])">
            <summary>
            Retrieve a int-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[])">
            <summary>
            Retrieve a char-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[])">
            <summary>
            Retrieve a double-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[])">
            <summary>
            Retrieve a string-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBQConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a int-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a char-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a double-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a string-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
            <returns>
            The current values of the requested attribute for each input
            quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBQConstr[0:,0:])">
            <summary>
            Retrieve a int-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[0:,0:])">
            <summary>
            Retrieve a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[0:,0:])">
            <summary>
            Retrieve a double-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBQConstr[0:,0:,0:])">
            <summary>
            Retrieve a int-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[0:,0:,0:])">
            <summary>
            Retrieve a char-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[0:,0:,0:])">
            <summary>
            Retrieve a double-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[0:,0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input quadratic constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBGenConstr[])">
            <summary>
            Retrieve an int-valued attribute for an array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[])">
            <summary>
            Retrieve a string-valued attribute for an array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBGenConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve an int-valued attribute for an array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first general constraint of interest in the list.
            </param>
            <param name="len">The number of general constraints.</param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[],System.Int32,System.Int32)">
            <summary>
            Retrieve a string-valued attribute for an array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <param name="start">
            The index of the first general constraint of interest in the list.
            </param>
            <param name="len">The number of general constraints.</param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBGenConstr[0:,0:])">
            <summary>
            Retrieve an int-valued attribute for a two-dimensional array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a two-dimensional array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.IntAttr,Gurobi.GRBGenConstr[0:,0:,0:])">
            <summary>
            Retrieve an int-valued attribute for a three-dimensional array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Get(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[0:,0:,0:])">
            <summary>
            Retrieve a string-valued attribute for a three-dimensional array of general constraints.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being queried.
            </param>
            <returns>
            The current values of the requested attribute for each input general constraint.
            </returns>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBVar[],System.Int32[])">
            <summary>
            Modify an integer-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBVar[],System.Char[])">
            <summary>
            Modify a char-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[],System.Double[])">
            <summary>
            Modify a double-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBVar[],System.String[])">
            <summary>
            Modify a string-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBVar[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            Modify an integer-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBVar[],System.Char[],System.Int32,System.Int32)">
            <summary>
            Modify a char-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Modify a double-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBVar[],System.String[],System.Int32,System.Int32)">
            <summary>
            Modify a string-valued attribute for an array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
            <param name="start">
            The index of the first variable of interest in the list.
            </param>
            <param name="len">The number of variables.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBVar[0:,0:],System.Int32[0:,0:])">
            <summary>
            Modify an integer-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBVar[0:,0:],System.Char[0:,0:])">
            <summary>
            Modify a char-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[0:,0:],System.Double[0:,0:])">
            <summary>
            Modify a double-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBVar[0:,0:],System.String[0:,0:])">
            <summary>
            Modify a string-valued attribute for a two-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBVar[0:,0:,0:],System.Int32[0:,0:,0:])">
            <summary>
            Modify an integer-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBVar[0:,0:,0:],System.Char[0:,0:,0:])">
            <summary>
            Modify a char-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBVar[0:,0:,0:],System.Double[0:,0:,0:])">
            <summary>
            Modify a double-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBVar[0:,0:,0:],System.String[0:,0:,0:])">
            <summary>
            Modify a string-valued attribute for a three-dimensional array of variables.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="vars">
            The variables whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input variable.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[],System.Int32[])">
            <summary>
            Modify an integer-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[],System.Char[])">
            <summary>
            Modify a char-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[],System.Double[])">
            <summary>
            Modify a double-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[],System.String[])">
            <summary>
            Modify a string-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            Modify an integer-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[],System.Char[],System.Int32,System.Int32)">
            <summary>
            Modify a char-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Modify a double-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[],System.String[],System.Int32,System.Int32)">
            <summary>
            Modify a string-valued attribute for an array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
            <param name="start">
            The index of the first constraint of interest in the list.
            </param>
            <param name="len">The number of constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[0:,0:],System.Int32[0:,0:])">
            <summary>
            Modify an integer-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[0:,0:],System.Char[0:,0:])">
            <summary>
            Modify a char-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[0:,0:],System.Double[0:,0:])">
            <summary>
            Modify a double-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[0:,0:],System.String[0:,0:])">
            <summary>
            Modify a string-valued attribute for a two-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.IntAttr,Gurobi.GRBConstr[0:,0:,0:],System.Int32[0:,0:,0:])">
            <summary>
            Modify an integer-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBConstr[0:,0:,0:],System.Char[0:,0:,0:])">
            <summary>
            Modify a char-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBConstr[0:,0:,0:],System.Double[0:,0:,0:])">
            <summary>
            Modify a double-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBConstr[0:,0:,0:],System.String[0:,0:,0:])">
            <summary>
            Modify a string-valued attribute for a three-dimensional array of constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="constrs">
            The constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[],System.Char[])">
            <summary>
            Modify a char-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[],System.Double[])">
            <summary>
            Modify a double-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[],System.String[])">
            <summary>
            Modify a string-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[],System.Char[],System.Int32,System.Int32)">
            <summary>
            Modify a char-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Modify a double-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[],System.String[],System.Int32,System.Int32)">
            <summary>
            Modify a string-valued attribute for an array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
            <param name="start">
            The index of the first quadratic constraint of interest in the list.
            </param>
            <param name="len">The number of quadratic constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[0:,0:],System.Char[0:,0:])">
            <summary>
            Modify a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[0:,0:],System.Double[0:,0:])">
            <summary>
            Modify a double-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <summary>
            Modify a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[0:,0:],System.String[0:,0:])">
            <summary>
            Modify a string-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <summary>
            Modify a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.CharAttr,Gurobi.GRBQConstr[0:,0:,0:],System.Char[0:,0:,0:])">
            <summary>
            Modify a char-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <summary>
            Modify a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.DoubleAttr,Gurobi.GRBQConstr[0:,0:,0:],System.Double[0:,0:,0:])">
            <summary>
            Modify a double-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <summary>
            Modify a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBQConstr[0:,0:,0:],System.String[0:,0:,0:])">
            <summary>
            Modify a string-valued attribute for a three-dimensional array of quadratic constraints.
            </summary>
            <summary>
            Modify a char-valued attribute for a two-dimensional array of quadratic constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="qconstrs">
            The quadratic constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input quadratic constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[],System.String[])">
            <summary>
            Modify a string-valued attribute for an array of general constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input general constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[],System.String[],System.Int32,System.Int32)">
            <summary>
            Modify a string-valued attribute for an array of general constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input general constraint.
            </param>
            <param name="start">
            The index of the first general constraint of interest in the list.
            </param>
            <param name="len">The number of general constraints.</param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[0:,0:],System.String[0:,0:])">
            <summary>
            Modify a string-valued attribute for a two-dimensional array of general constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input general constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.Set(Gurobi.GRB.StringAttr,Gurobi.GRBGenConstr[0:,0:,0:],System.String[0:,0:,0:])">
            <summary>
            Modify a string-valued attribute for a three-dimensional array of general constraints.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="genconstrs">
            The general constraints whose attribute values are being modified.
            </param>
            <param name="values">
            The desired new values for the attribute for each input general constraint.
            </param>
        </member>
        <member name="M:Gurobi.GRBModel.SetCallback(Gurobi.GRBCallback)">
            <summary>
            Set the callback object for this model. The Callback() method on this
            object will be called periodically from the Gurobi solver. This gives
            you the opportunity to obtain more detailed information about the state
            of the optimization.
            </summary>
            <remarks>
            Note that a model can only have a single callback method, so this call
            will replace an existing callback. To disable a previously set callback,
            call this method with a <c>null</c> argument.
            </remarks>
            <param name="xcb">The callback object.</param>
        </member>
        <member name="T:Gurobi.GRBQConstr">
            <summary>
            Gurobi quadratic constraint class. Quadratic constraints are always
            associated with a particular model. You create a quadratic constraint
            object by adding a quadratic constraint to a model (using
            GRBModel.AddQConstr), rather than by using a GRBQConstr constructor.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.IISQConstr">
            <summary>
            Gets a value indicating whether the quadratic constraint participates in the IIS.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.QCName">
            <summary>
            Gets or sets the quadratic constraint name.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.QCPi">
            <summary>
            Gets the dual value of the quadratic constraint.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.QCRHS">
            <summary>
            Gets or sets the right-hand side value of the quadratic constraint.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.QCSense">
            <summary>
            Gets or sets the quadratic constraint sense (<see cref="F:Gurobi.GRB.LESS_EQUAL" />, <see cref="F:Gurobi.GRB.GREATER_EQUAL" />, or <see cref="F:Gurobi.GRB.EQUAL" />).
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.QCSlack">
            <summary>
            Gets the slack value of the quadratic constraint in the current solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQConstr.QCTag">
            <summary>
            Gets or sets the tag string for quadratic constraints (each defined quadratic constraint tag MUST be unique).
            </summary>
        </member>
        <member name="M:Gurobi.GRBQConstr.#ctor">
            <summary>
            Do not use this constructor. Use GRBModel.AddQConstr to
            add a quadratic constraint to a model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBQConstr.Get(Gurobi.GRB.CharAttr)">
            <summary>
            Query the value of a character-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBQConstr.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Query the value of an int-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBQConstr.Get(Gurobi.GRB.DoubleAttr)">
            <summary>
            Queries the value of a double-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBQConstr.Get(Gurobi.GRB.StringAttr)">
            <summary>
            Query the value of a string-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBQConstr.Set(Gurobi.GRB.CharAttr,System.Char)">
            <summary>
            Modify the value of a character-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBQConstr.Set(Gurobi.GRB.DoubleAttr,System.Double)">
            <summary>
            Modify the value of a double-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBQConstr.Set(Gurobi.GRB.StringAttr,System.String)">
            <summary>
            Modifies the value of a string-valued quadratic constraint attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value of the attribute.</param>
        </member>
        <member name="T:Gurobi.GRBQuadExpr">
            <summary>
            Gurobi quadratic expression class. A quadratic expression consists of a
            linear expression, plus a list of coefficient-variable-variable triples
            that capture the quadratic terms. Quadratic expressions are used to build
            quadratic objective functions and quadratic constraints. They are temporary
            objects that typically have short lifespans.
            </summary>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.#ctor">
            <summary>
            Create an empty quadratic expression.
            </summary>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.#ctor(System.Double)">
            <summary>
            Create a constant quadratic expression.
            </summary>
            <param name="a">Constant value for expression.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.#ctor(Gurobi.GRBVar,System.Double)">
            <summary>
            Create a quadratic expression with one linear term.
            </summary>
            <param name="x">Variable for expression term.</param>
            <param name="a">Coefficient for expression term.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.#ctor(Gurobi.GRBLinExpr)">
            <summary>
            Create a quadratic expressions from a linear expression.
            </summary>
            <param name="le">Existing linear expression to copy.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.#ctor(Gurobi.GRBQuadExpr)">
            <summary>
            Copy an existing quadratic expression.
            </summary>
            <param name="qe">Existing quadratic expression to copy.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Implicit(System.Double)~Gurobi.GRBQuadExpr">
            <summary>
            Create a constant quadratic expression from a constant value.
            </summary>
            <param name="constant">Constant value.</param>
            <returns>A new constant quadratic expression.</returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Implicit(Gurobi.GRBVar)~Gurobi.GRBQuadExpr">
            <summary>
            Create a quadratic expression from a single variable.
            </summary>
            <param name="var">Variable for expression term.</param>
            <returns>A new quadratic expression with one variable.</returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Implicit(Gurobi.GRBLinExpr)~Gurobi.GRBQuadExpr">
            <summary>
            Initialize a quadratic expression from an existing linear expression.
            </summary>
            <param name="le">Existing linear expression to copy.</param>
            <returns>
            Quadratic expression object whose initial value is taken from the
            input linear expression.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Addition(Gurobi.GRBQuadExpr,Gurobi.GRBVar)">
            <summary>
            Create a new quadratic expression by adding a quadratic expression
            and a variable.
            </summary>
            <param name="expr">Quadratic expression.</param>
            <param name="var">Variable to add.</param>
            <returns>
            A new quadratic expression that is equal to the sum of the
            argument quadratic expression and the argument variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Addition(Gurobi.GRBVar,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic expression by adding a variable and
            a quadratic expression.
            </summary>
            <param name="var">Variable to add.</param>
            <param name="expr">Quadratic expression.</param>
            <returns>
            A new quadratic expression that is equal to the sum of the
            argument variable and the argument quadratic expression.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Addition(Gurobi.GRBQuadExpr,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic expression by adding a pair of quadratic expressions.
            </summary>
            <param name="expr1">First quadratic expression.</param>
            <param name="expr2">Second quadratic expression.</param>
            <returns>
            A new quadratic expression that is equal to the sum of the two
            argument expressions.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Subtraction(Gurobi.GRBQuadExpr,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic expression by subtracting a pair of
            quadratic expressions.
            </summary>
            <param name="expr1">First quadratic expression.</param>
            <param name="expr2">Second quadratic expression.</param>
            <returns>
            A new quadratic expression that is equal to the first expression minus
            the second.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_UnaryNegation(Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic expression by multiplying a quadratic expression by -1.
            </summary>
            <param name="expr">Quadratic expression.</param>
            <returns>A new quadratic expression that is equal to the product of the
            quadratic expression argument and -1.</returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Multiply(System.Double,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic expression by multiplying a constant value
            with a quadratic expression.
            </summary>
            <param name="mult">Constant value.</param>
            <param name="expr">Quadratic expression.</param>
            <returns>A new quadratic expression that is equal to the input expression
            times the input multiplier.</returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Multiply(Gurobi.GRBQuadExpr,System.Double)">
            <summary>
            Create a new quadratic expression by multiplying a quadratic expression
            with a constant value.
            </summary>
            <param name="expr">Quadratic expression.</param>
            <param name="mult">Constant value.</param>
            <returns>A new quadratic expression that is equal to the input expression
            times the input multiplier.</returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_LessThanOrEqual(Gurobi.GRBQuadExpr,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic inequality constraint.
            </summary>
            <param name="lhs">Left-hand side of inequality constraint.</param>
            <param name="rhs">Right-hand side of inequality constraint.</param>
            <returns>
            A new quadratic constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_GreaterThanOrEqual(Gurobi.GRBQuadExpr,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic inequality constraint.
            </summary>
            <param name="lhs">Left-hand side of inequality constraint.</param>
            <param name="rhs">Right-hand side of inequality constraint.</param>
            <returns>
            A new quadratic constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Equality(Gurobi.GRBQuadExpr,Gurobi.GRBQuadExpr)">
            <summary>
            Create a new quadratic equality constraint.
            </summary>
            <param name="lhs">Left-hand side of equality constraint.</param>
            <param name="rhs">Right-hand side of equality constraint.</param>
            <returns>
            A new quadratic constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.op_Inequality(Gurobi.GRBQuadExpr,Gurobi.GRBQuadExpr)">
            <summary>Invalid operator. Do not use.</summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="P:Gurobi.GRBQuadExpr.Size">
            <summary>
            Return the numbers of terms in the expression (not including the
            constant).
            </summary>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.GetVar1(System.Int32)">
            <summary>
            Retrieve the first variable for quadratic term <paramref name="i"/>
            in the quadratic expression.
            </summary>
            <param name="i">Term index. Must be less than <see cref="P:Gurobi.GRBQuadExpr.Size"/></param>
            <returns>
            First variable of the quadratic term at index <paramref name="i"/>
            in the expression.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.GetVar2(System.Int32)">
            <summary>
            Retrieve the second variable for quadratic term <paramref name="i"/>
            in the quadratic expression.
            </summary>
            <param name="i">Term index. Must be less than <see cref="P:Gurobi.GRBQuadExpr.Size"/></param>
            <returns>
            Second variable of the quadratic term at index <paramref name="i"/>
            in the expression.
            </returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.GetCoeff(System.Int32)">
            <summary>
            Retrieve the coefficient for quadratic term <paramref name="i"/> in the expression.
            </summary>
            <param name="i">Term index. Must be less than <see cref="P:Gurobi.GRBQuadExpr.Size"/></param>
            <returns>
            Coefficient of the quadratic term at index <paramref name="i"/>
            in the expression.
            </returns>
        </member>
        <member name="P:Gurobi.GRBQuadExpr.LinExpr">
            <summary>
            Retrieve the constant term in the expression.
            </summary>
        </member>
        <member name="P:Gurobi.GRBQuadExpr.Value">
            <summary>
            Compute the value of the expression for the current solution.
            </summary>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddConstant(System.Double)">
            <summary>
            Add a constant into the expression.
            </summary>
            <param name="c">Constant to add to expression.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddTerm(System.Double,Gurobi.GRBVar)">
            <summary>
            Adds a term into the expression.
            </summary>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddTerm(System.Double,Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Add a single quadratic term
            (<paramref name="coeff"/>*<paramref name="var1"/>*<paramref name="var2"/>)
            into the expression.
            </summary>
            <param name="coeff">Coefficient for new quadratic term.</param>
            <param name="var1">First variable for new quadratic term</param>
            <param name="var2">Second variable for new quadratic term.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddTerms(System.Double[],Gurobi.GRBVar[])">
            <summary>
            Add multiple linear terms into the expression.
            </summary>
            <remarks>
            The lengths of the two argument arrays must be equal.
            </remarks>
            <param name="coeff">Coefficients for new terms.</param>
            <param name="var">Variables for new terms.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddTerms(System.Double[],Gurobi.GRBVar[],Gurobi.GRBVar[])">
            <summary>
            Add multiple quadratic terms into the expression.
            </summary>
            <remarks>
            The lengths of the three argument arrays must be equal.
            </remarks>
            <param name="coeff">Coefficients for new terms.</param>
            <param name="var1">First variables for new quadratic terms.</param>
            <param name="var2">Second variables for new quadratic terms.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddTerms(System.Double[],Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Add multiple linear terms into the expression.
            </summary>
            <remarks>
            The lengths of the two argument arrays must be equal.
            </remarks>
            <param name="coeff">Coefficients for new terms.</param>
            <param name="var">Variables for new terms.</param>
            <param name="start">The index of the first term in the array to add.</param>
            <param name="len">The number of terms to add.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.AddTerms(System.Double[],Gurobi.GRBVar[],Gurobi.GRBVar[],System.Int32,System.Int32)">
            <summary>
            Add multiple quadratic terms into the expression.
            </summary>
            <remarks>
            The lengths of the three argument arrays must be equal.
            </remarks>
            <param name="coeff">Coefficients for new terms.</param>
            <param name="var1">First variables for new quadratic terms.</param>
            <param name="var2">Second variables for new quadratic terms.</param>
            <param name="start">The index of the first term in the array to add.</param>
            <param name="len">The number of terms to add.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.Add(Gurobi.GRBLinExpr)">
            <summary>
            Add an linear expression into the expression.
            </summary>
            <remarks>
            Upon completion, the invoking quadratic expression will be
            equal to the sum of itself and the argument expression.
            </remarks>
            <param name="le">Linear expression to add.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.Add(Gurobi.GRBQuadExpr)">
            <summary>
            Add an quadratic expression into the expression.
            </summary>
            <remarks>
            Upon completion, the invoking quadratic expression will be
            equal to the sum of itself and the argument expression.
            </remarks>
            <param name="le">Quadratic expression to add.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.MultAdd(System.Double,Gurobi.GRBLinExpr)">
            <summary>
            Add a linear multiple of an expression into the expression.
            </summary>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.MultAdd(System.Double,Gurobi.GRBQuadExpr)">
            <summary>
            Add a multiple of a quadratic expression into the expression.
            </summary>
            <remarks>
            Upon completion, the invoking quadratic expression is equal the sum of
            itself and the constant times the argument expression.
            </remarks>
            <param name="m">Constant multiplier for added expression.</param>
            <param name="qe">Quadratic expression to add.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.Remove(System.Int32)">
            <summary>
            Remove term <paramref name="i"/> from the expression.
            </summary>
            <param name="i">The index of the quadratic term to be removed.</param>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.Remove(Gurobi.GRBVar)">
            <summary>
            Remove all terms associated with variable <paramref name="v"/> from the expression.
            </summary>
            <param name="v">The variable whose term should be removed.</param>
            <returns><c>true</c> if the variable appeared in the quadratic expression (and was removed).</returns>
        </member>
        <member name="M:Gurobi.GRBQuadExpr.Clear">
            <summary>
            Set the expression to 0. You should use the overloaded <c>expression = 0</c> instead.
            </summary>
        </member>
        <member name="T:Gurobi.GRBSOS">
            <summary>
            Gurobi SOS constraint class. SOS constraints are always associated with a
            particular model. You create an SOS object by adding an SOS constraint to
            a model (using <see cref="M:Gurobi.GRBModel.AddSOS(Gurobi.GRBVar[],System.Double[],System.Int32)"/>), rather than by using a
            GRBSOS constructor. Similarly, SOS constraints are removed using the
            <see cref="M:Gurobi.GRBModel.Remove(Gurobi.GRBSOS)"/> method.
            </summary>
        </member>
        <member name="P:Gurobi.GRBSOS.IISSOS">
            <summary>
            Gets a value indicating whether the SOS constraint participates in the IIS.
            </summary>
        </member>
        <member name="M:Gurobi.GRBSOS.#ctor">
            <summary>
            Do not use this constructor. Use <see cref="M:Gurobi.GRBModel.AddSOS(Gurobi.GRBVar[],System.Double[],System.Int32)"/> to
            add an SOS constraint to a model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBSOS.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Query the value of an integer-valued SOS attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="T:Gurobi.GRBTempConstr">
            <summary>
            Gurobi temporary constraint class.  Objects of this class are created
            as intermediate results when building constraints using overloaded
            comparison operators.  You will generally never store objects
            of this class in your own variables.
            </summary>
        </member>
        <member name="T:Gurobi.GRBVar">
            <summary>
            Gurobi variable class. Variables are always associated with a particular
            model. You create a variable object by adding a variable to a model (using
            GRBModel.AddVar), rather than by using a GRBVar constructor.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.BarX">
            <summary>
            Gets the value in the best barrier iterate (before crossover).
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.BranchPriority">
            <summary>
            Gets or sets the branching priority.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.IISLB">
            <summary>
            Gets a value indicating whether the lower bound participate in the IIS.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.IISUB">
            <summary>
            Gets a value indicating whether the upper bound participate in the IIS.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.LB">
            <summary>
            Gets or sets the variable lower bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.Obj">
            <summary>
            Gets or sets the variable objective coefficient.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.ObjN">
            <summary>
            Gets or sets the variable objective coefficient of multi-objectives.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.Partition">
            <summary>
            Gets or sets the variable partition number.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.PStart">
            <summary>
            Gets or sets the simplex start vector.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.PWLObjCvx">
            <summary>
            Gets a value indicating whether the variable has a convex piecewise-linear objective.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.PreFixVal">
            <summary>
            Gets the value of the variable (for variables fixed by presolve).
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.RC">
            <summary>
            Gets the reduced cost.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.SALBLow">
            <summary>
            Gets the lower bound sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.SALBUp">
            <summary>
            Gets the lower bound sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.SAObjLow">
            <summary>
            Gets the objective coefficient sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.SAObjUp">
            <summary>
            Gets the objective coefficient sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.SAUBLow">
            <summary>
            Gets the upper bound sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.SAUBUp">
            <summary>
            Gets the upper bound sensitivity information.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.ScenNLB">
            <summary>
            Gets or sets the modification to lower bounds of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.ScenNUB">
            <summary>
            Gets or sets the modification to upper bounds of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.ScenNObj">
            <summary>
            Gets or sets the modification to objective coefficients of current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.ScenNX">
            <summary>
            Gets the value in the current solution of the current scenario in multi-scenario model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.Start">
            <summary>
            Gets or sets the MIP start value (for constructing an initial MIP solution).
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.UB">
            <summary>
            Gets or sets the variable upper bound.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.UnbdRay">
            <summary>
            Gets the unbounded ray.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VBasis">
            <summary>
            Gets or sets the basis status.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VType">
            <summary>
            Gets or sets the variable type (<see cref="F:Gurobi.GRB.CONTINUOUS" />, <see cref="F:Gurobi.GRB.BINARY" />, <see cref="F:Gurobi.GRB.INTEGER" />, <see cref="F:Gurobi.GRB.SEMICONT" />, or <see cref="F:Gurobi.GRB.SEMIINT" />).
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VarHintPri">
            <summary>
            Gets or sets the MIP hint priority.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VarHintVal">
            <summary>
            Gets or sets the MIP hint value.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VarName">
            <summary>
            Gets or sets the variable name.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VarPreStat">
            <summary>
            Gets or sets the status of variable in presolved model.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.X">
            <summary>
            Gets the value in the current solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.Xn">
            <summary>
            Gets the value in a sub-optimal MIP solution.
            </summary>
        </member>
        <member name="P:Gurobi.GRBVar.VTag">
            <summary>
            Gets or sets the tag string for variables (each defined variable tag MUST be unique).
            </summary>
        </member>
        <member name="M:Gurobi.GRBVar.#ctor">
            <summary>
            Do not use this constructor. Use GRBModel.AddVar to
            add a variable to a model.
            </summary>
        </member>
        <member name="M:Gurobi.GRBVar.op_Addition(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by adding a pair of variables.
            </summary>
            <param name="x">First variable argument.</param>
            <param name="y">Second variable argument.</param>
            <returns>
            A linear expression that is equal to the sum of the two argument
            variables.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Addition(System.Double,Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by adding a constant value and a variable.
            </summary>
            <param name="a">Constant argument.</param>
            <param name="x">Variable argument.</param>
            <returns>
            A linear expression that is equal to the sum of the constant and the
            variable argument.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Addition(Gurobi.GRBVar,System.Double)">
            <summary>
            Create a new linear expression by adding a variable and a constant value.
            </summary>
            <param name="x">Variable argument.</param>
            <param name="a">Constant argument.</param>
            <returns>
            A linear expression that is equal to the sum of the variable argument
            and the constant argument.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Subtraction(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by subtracting one variable from another.
            </summary>
            <param name="x">First variable argument.</param>
            <param name="y">Second variable argument.</param>
            <returns>
            A linear expression that is equal to the first variable minus the second.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Subtraction(System.Double,Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by subtracting a variable from a
            constant value.
            </summary>
            <param name="a">Constant value argument.</param>
            <param name="x">Variable argument.</param>
            <returns>
            A linear expression that is equal to the constant value minus the variable.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Subtraction(Gurobi.GRBVar,System.Double)">
            <summary>
            Create a new linear expression by subtracting a constant value from
            a variable.
            </summary>
            <param name="x">Variable argument.</param>
            <param name="a">Constant value argument.</param>
            <returns>
            A linear expression that is equal to the variable minus the constant value.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_UnaryNegation(Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by multiplying a variable with -1.
            </summary>
            <param name="x">Variable argument</param>
            <returns>
            A linear expression that is equal to the variable times -1.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Multiply(System.Double,Gurobi.GRBVar)">
            <summary>
            Create a new linear expression by multiplying a constant value with
            a variable.
            </summary>
            <param name="a">Multiplier for variable argument.</param>
            <param name="x">Variable argument.</param>
            <returns>
            A linear expression that is equal to the input variable times
            the input multiplier.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Multiply(Gurobi.GRBVar,System.Double)">
            <summary>
            Create a new linear expression by multiplying a variable with
            a constant value.
            </summary>
            <param name="x">Variable argument.</param>
            <param name="a">Multiplier for variable argument.</param>
            <returns>
            A linear expression that is equal to the input variable times
            the input multiplier.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Division(Gurobi.GRBVar,System.Double)">
            <summary>
            Create a new expression by dividing a variable by a constant.
            </summary>
            <param name="x">Variable argument.</param>
            <param name="a">Divisor for variable argument.</param>
            <returns>
            A linear expression that is equal to the input variable divided
            by the input divisor.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Multiply(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Create a new quadratic expression by multiplying a pair of variables.
            </summary>
            <param name="var1">First variable argument.</param>
            <param name="var2">Second variable argument.</param>
            <returns>
            A quadratic expression that is equal to the product of
            the two input variables.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_LessThanOrEqual(Gurobi.GRBVar,System.Double)">
            <summary>Create an inequality constraint.</summary>
            <param name="x">Left-hand side variable.</param>
            <param name="rhs">Right-hand side constant value.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_LessThanOrEqual(System.Double,Gurobi.GRBVar)">
            <summary>Create an inequality constraint.</summary>
            <param name="lhs">Left-hand side constant value.</param>
            <param name="y">Right-hand side variable.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_LessThanOrEqual(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Create an inequality constraint.
            </summary>
            <param name="x">Left-hand side variable.</param>
            <param name="y">Right-hand side variable.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_GreaterThanOrEqual(Gurobi.GRBVar,System.Double)">
            <summary>Create an inequality constraint.</summary>
            <param name="x">Left-hand side variable.</param>
            <param name="rhs">Right-hand side constant value.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_GreaterThanOrEqual(System.Double,Gurobi.GRBVar)">
            <summary>Create an inequality constraint.</summary>
            <param name="lhs">Left-hand side constant value.</param>
            <param name="y">Right-hand side variable.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_GreaterThanOrEqual(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Create an inequality constraint.
            </summary>
            <param name="x">Left-hand side variable.</param>
            <param name="y">Right-hand side variable.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Equality(Gurobi.GRBVar,System.Double)">
            <summary>Create an equality constraint.</summary>
            <param name="x">Left-hand side variable.</param>
            <param name="rhs">Right-hand side constant value.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Equality(System.Double,Gurobi.GRBVar)">
            <summary>Create an equality constraint.</summary>
            <param name="lhs">Left-hand side constant value.</param>
            <param name="y">Right-hand side variable.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Equality(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>
            Create an equality constraint.
            </summary>
            <param name="x">Left-hand side variable.</param>
            <param name="y">Right-hand side variable.</param>
            <returns>
            A new linear constraint. The result is typically passed to
            <see cref="M:Gurobi.GRBModel.AddConstr(Gurobi.GRBTempConstr,System.String)"/>.
            </returns>
        </member>
        <member name="M:Gurobi.GRBVar.op_Inequality(Gurobi.GRBVar,System.Double)">
            <summary>Invalid constraint type. Do not use.</summary>
        </member>
        <member name="M:Gurobi.GRBVar.op_Inequality(System.Double,Gurobi.GRBVar)">
            <summary>Invalid constraint type. Do not use.</summary>
        </member>
        <member name="M:Gurobi.GRBVar.op_Inequality(Gurobi.GRBVar,Gurobi.GRBVar)">
            <summary>Invalid constraint type. Do not use.</summary>
        </member>
        <member name="M:Gurobi.GRBVar.SameAs(Gurobi.GRBVar)">
            <summary>
            Indicate whether two GRBVar objects refer to the same Gurobi model
            variable.
            </summary>
            <param name="v2">The other variable.</param>
            <returns>
            <c>true</c> if the two variable objects refer to the same model variable.
            </returns>
        </member>
        <member name="P:Gurobi.GRBVar.Index">
            <summary>
            Retrieve the index of the variable in the model.
            </summary>
            <returns> -2: removed, -1: not in model, >= 0: index in the model.</returns>
        </member>
        <member name="M:Gurobi.GRBVar.Get(Gurobi.GRB.IntAttr)">
            <summary>
            Retrieve the value of an integer-valued variable attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBVar.Get(Gurobi.GRB.CharAttr)">
            <summary>
            Retrieve the value of a character-valued variable attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBVar.Get(Gurobi.GRB.DoubleAttr)">
            <summary>
            Retrieve the value of a double-valued variable attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBVar.Get(Gurobi.GRB.StringAttr)">
            <summary>
            Retrieve the value of a string-valued variable attribute.
            </summary>
            <param name="attr">The attribute being queried.</param>
            <returns>The current value of the requested attribute.</returns>
        </member>
        <member name="M:Gurobi.GRBVar.Set(Gurobi.GRB.IntAttr,System.Int32)">
            <summary>
            Modify the value of an integer-valued variable attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBVar.Set(Gurobi.GRB.CharAttr,System.Char)">
            <summary>
            Modify the value of a character-valued variable attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBVar.Set(Gurobi.GRB.DoubleAttr,System.Double)">
            <summary>
            Modify the value of a double-valued variable attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
        <member name="M:Gurobi.GRBVar.Set(Gurobi.GRB.StringAttr,System.String)">
            <summary>
            Modify the value of a string-valued variable attribute.
            </summary>
            <param name="attr">The attribute being modified.</param>
            <param name="newvalue">The desired new value for the attribute.</param>
        </member>
    </members>
</doc>
